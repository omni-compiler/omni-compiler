.PHONY: all install clean

FC       = @MPI_FC@
FPPFLAGS = @FPP_FLAGS@
F_FRONT  = F_Front
CC       = @CC@
LIBXML2  = @LIBXML2_INCLUDE_DIR@
CFLAGS   = @CFLAGS@ -DNDEBUG -DBUGFIX -D__XCODEML__ -DYYDEBUG -I$(LIBXML2)/libxml2 -I../../include
LDFLAGS  = -L@LIBXML2_LIB_DIR@ -lxml2 -lm
MKDIR_P  = @MKDIR_P@
INSTALL  = @INSTALL@
BINDIR   = @OMNI_HOME@/bin
AWK      = @AWK@
XMODDIR  = @OMNI_HOME@/fincludes
INTRMOD  = fincludes/iso_fortran_env.xmod fincludes/iso_c_binding.xmod \
           fincludes/ieee_features.xmod fincludes/ieee_exceptions.xmod \
		   fincludes/ieee_arithmetic.xmod

OBJECTS = F95-main.o C-expr-mem.o C-exprcode.o F-datatype.o F-ident.o \
	  F95-parser.o F-mem.o F-compile.o F-compile-decl.o F-compile-expr.o \
	  F-opt-expv.o F-output-xcodeml.o F-io-xcodeml.o F-data.o F-datasub.o \
	  F-equiv.o F-varutil.o F-intrinsic.o F-intrinsics-table.o F-OMP.o F-ACC.o F-XMP.o \
	  xcodeml-node.o xcodeml-parse.o xcodeml-util.o xcodeml-type.o \
	  xcodeml-traverse.o xcodeml-output-F.o F-dump.o F-type-attr-tbl.o \
	  module-manager.o hash.o F-input-xmod.o F-module-procedure.o F-second-pass.o
HEADERS = C-OMP.h C-ACC.h C-XMP.h C-expr.h C-exprcode.h F-datatype.h F-front.h F-ident.h \
	  F-input-xmod.h F-intrinsics-types.h F-module-procedure.h F-output-xcodeml.h \
	  F-second-pass.h hash.h module-manager.h xcodeml-module.h xcodeml-node.h xcodeml.h
CREATE_FILES = C-exprcode.h C-exprcode.c

IS_CRAY     = @CRAY@
FALSE       = 1
TRUE        = 0
IS_MOD2XMOD = @MOD2XMOD@
KIND_MPI_FORTRAN = @KIND_MPI_FORTRAN@
ifeq ($(IS_MOD2XMOD), $(TRUE))
ifeq ($(KIND_MPI_FORTRAN), gfortran)
    CFLAGS+=-D_FC_IS_GFORTRAN
endif
ifeq ($(KIND_MPI_FORTRAN), frtpx)
    CFLAGS+=-D_FC_IS_FRTPX
endif
endif

ENABLE_UCHARDET = @ENABLE_UCHARDET@
UCHARDET_CFLAGS = -DENABLE_UCHARDET -I@UCHARDET_INCLUDE_DIR@
UCHARDET_LDFLAGS = -L@UCHARDET_LIB_DIR@ -luchardet
ifeq ($(ENABLE_UCHARDET), yes)
    CFLAGS+=$(UCHARDET_CFLAGS)
    LDFLAGS+=$(UCHARDET_LDFLAGS)
endif

all: $(F_FRONT) $(INTRMOD)

$(F_FRONT): $(OBJECTS) $(HEADERS)
	$(CC) $(CFLAGS) -o $@ $(OBJECTS) $(LDFLAGS)

F95-parser.o : F95-parser.y F95-lex.c

$(OBJECTS): $(HEADERS)

.c.o:
	$(CC) $(CFLAGS) $< -c

C-exprcode.h: C-exprcode.def C-exprcode.h.awk
	$(AWK) -f C-exprcode.h.awk < C-exprcode.def > C-exprcode.h

C-exprcode.c: C-exprcode.def C-exprcode.c.awk
	$(AWK) -f C-exprcode.c.awk < C-exprcode.def > C-exprcode.c

fincludes/iso_c_binding.xmod: fincludes/iso_c_binding.f90 $(F_FRONT)
	./$(F_FRONT) -module-compile $< > $@

fincludes/iso_fortran_env.xmod: fincludes/iso_fortran_env.f90 $(F_FRONT)
	./$(F_FRONT) -module-compile $< > $@

ifeq ($(IS_CRAY), $(TRUE))
fincludes/ieee_features.xmod: fincludes/ieee_features.f90 $(F_FRONT)
	 $(FC) $(FPPFLAGS) $<
	 ./$(F_FRONT) -module-compile ieee_features.i > $@

fincludes/ieee_exceptions.xmod: fincludes/ieee_exceptions.f90 $(F_FRONT)
	 $(FC) $(FPPFLAGS) $<
	 ./$(F_FRONT) -module-compile ieee_exceptions.i > $@

fincludes/ieee_arithmetic.xmod: fincludes/ieee_arithmetic.f90 $(F_FRONT)  fincludes/ieee_exceptions.xmod
	 $(FC) $(FPPFLAGS) $<
	 ./$(F_FRONT) -module-compile ieee_arithmetic.i > $@
else
fincludes/ieee_features.xmod: fincludes/ieee_features.f90 $(F_FRONT)
	 $(FC) $(FPPFLAGS) $< | ./$(F_FRONT) -module-compile > $@

fincludes/ieee_exceptions.xmod: fincludes/ieee_exceptions.f90 $(F_FRONT)
	 $(FC) $(FPPFLAGS) $< | ./$(F_FRONT) -module-compile > $@

fincludes/ieee_arithmetic.xmod: fincludes/ieee_arithmetic.f90 $(F_FRONT)  fincludes/ieee_exceptions.xmod
	 $(FC) $(FPPFLAGS) $< | ./$(F_FRONT) -M ./fincludes -module-compile > $@
endif

install: $(F_FRONT)
	$(MKDIR_P) $(DESTDIR)$(BINDIR)
	$(INSTALL) $(F_FRONT) $(DESTDIR)$(BINDIR)
	$(MKDIR_P) $(XMODDIR)
	$(INSTALL) $(INTRMOD) $(XMODDIR)

clean:
	rm -f *.o $(CREATE_FILES) $(F_FRONT)

