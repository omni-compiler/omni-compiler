AC_PREREQ([2.69])
AC_INIT([Omni Compiler], [1.1.1], [omni-compiler@googlegroups.com], [omni])
AC_CONFIG_AUX_DIR([./buildutils])
AC_CONFIG_MACRO_DIR([./buildutils])
AC_CANONICAL_TARGET
AC_CONFIG_SRCDIR([include/exc_platform.h])
AC_CONFIG_HEADER([include/config.h Driver/atool/src/include/nata/nata_config.h])

#--------------------------------------------------------------------
# Save environmental variables set by user before AC_PROG_CC and so on.
userCFLAGS=${CFLAGS}
userFCFLAGS=${FCFLAGS}
userMPI_CPPFLAGS=${MPI_CPPFLAGS}
userMPI_CFLAGS=${MPI_CFLAGS}
userMPI_CLIBS=${MPI_CLIBS}
userMPI_FPPFLAGS=${MPI_FPPFLAGS}
userMPI_FCFLAGS=${MPI_FCFLAGS}
userMPI_FCLIBS=${MPI_FCLIBS}

# Checks for programs.
AC_PROG_CPP
AC_PROG_CC
AC_PROG_FC
AC_PROG_CXX
#AC_PROG_MAKE_SET
AC_PROG_AWK
AC_PROG_YACC
AC_PROG_LEX
AC_PROG_LN_S
AC_PROG_MAKE_SET
#AC_PROG_RANLIB

# Checks for libraries.
# Need this to get around rpc_malloc error in AIX
# see https://www.mail-archive.com/gsoap@yahoogroups.com/msg00385.html
if test "$target" = "powerpc-hitachi-aix"; then
    export ac_cv_func_malloc_0_nonnull=yes
    export ac_cv_func_realloc_0_nonnull=yes
fi

# Checks for header files.
AC_FUNC_ALLOCA
AC_CHECK_HEADERS([arpa/inet.h fcntl.h float.h inttypes.h limits.h locale.h malloc.h memory.h netdb.h netinet/in.h stddef.h stdint.h stdlib.h string.h strings.h sys/file.h sys/ioctl.h sys/param.h sys/socket.h sys/time.h sys/timeb.h syslog.h unistd.h wchar.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_CHECK_HEADER_STDBOOL
AC_TYPE_UID_T
AC_C_INLINE
AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_INT8_T
AC_TYPE_MODE_T
AC_FUNC_OBSTACK
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_C_RESTRICT
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_STRUCT_TIMEZONE
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T
AC_TYPE_UINT8_T
AC_CHECK_TYPES([ptrdiff_t])

# Checks for library functions.
AC_FUNC_CHOWN
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FORK
AC_FUNC_FSEEKO
AC_FUNC_GETGROUPS
AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
AC_FUNC_MALLOC
AC_FUNC_MKTIME
AC_FUNC_REALLOC
AC_FUNC_STRCOLL
AC_FUNC_STRERROR_R
#AC_FUNC_STRNLEN
AC_FUNC_STRTOD
AC_CHECK_FUNCS([alarm atexit bzero clock_gettime dup2 euidaccess fchdir fdatasync floor ftruncate getcwd getdelim gethostbyaddr gethostbyname gethostname gethrtime getpagesize getpass gettimeofday getusershell inet_ntoa lchown localtime_r mblen memchr memmove mempcpy memset mkdir pathconf pow putenv realpath regcomp rmdir rpmatch select setenv sethostname setlocale socket stime stpcpy strcasecmp strchr strcspn strdup strerror strncasecmp strndup strpbrk strrchr strspn strstr strtol strtoul strtoull strverscmp tzset])

# Options of old configure
# Not needed ?
AC_C_BIGENDIAN
AC_C_CONST
AC_STRUCT_TM
AC_HEADER_STDC
AC_HEADER_TIME

#--------------------------------------------------------------------
# Set useful commands
RM="rm -f"
AC_SUBST(RM)

INSTALL="install"
AC_SUBST(INSTALL)

MKDIR_P="install -m 755 -d"
AC_SUBST(MKDIR_P)

#--------------------------------------------------------------------
# Set true/false
FALSE=1
TRUE=0

#--------------------------------------------------------------------
# Set options
#--------------------------------------------------------------------
AC_ARG_WITH(thread,
	    [  --with-thread               type of openmp thread],
	    [thread_type=$withval], [thread_type=""])

# Default lock type
# Check whether --with-lock or --without-lock was given.
AC_ARG_WITH(lock,
	    [  --with-lock                 type of openmp lock],
	    [lock_type=$withval], [lock_type=""])

# specify GPU C compiler
AC_ARG_WITH(gpucc,
	    [  --with-gpucc=CMD            GPU C compiler (default: nvcc)],
	    [GPU_CMD="${withval}"], [GPU_CMD="nvcc"])

# specify GPU C compiler flags
AC_ARG_WITH(gpu-cflags,
	    [  --with-gpu-cflags=CFLAGS    GPU C compiler flags (default: -arch=sm_20 -O3 -Wno-deprecated-gpu-targets)],
	    [GPU_CFLAGS="${withval}"], [GPU_CFLAGS="-arch=sm_20 -O3 -Wno-deprecated-gpu-targets"])

# specify CUDA path
AC_ARG_WITH(cuda,
	    [  --with-cuda=DIR             CUDA installation path (default: /usr/local/cuda)],
	    [CUDA_PREFIX="${withval}"; use_cuda=yes], [use_cuda=no])

# specify OpenCL path
AC_ARG_WITH(opencl,
	    [  --with-opencl=DIR           OpenCL installation path (default: /usr/local/cuda)],
	    [OPENCL_PREFIX="${withval}"; use_opencl=yes], [use_opencl=no])

# set cuda default path
if test "x${CUDA_PREFIX}" = "xyes"; then
   CUDA_PREFIX=/usr/local/cuda
fi

# AM_CONDITIONAL(CUDA, test x${use_cuda} = xyes)
CUDA=$FALSE
if test "x${use_cuda}" = "xyes"; then
    CUDA=$TRUE
fi
AC_SUBST(CUDA)

# set opencl default path
if test "x${OPENCL_PREFIX}" = "xyes"; then
   OPENCL_PREFIX=/usr/local/cuda
fi

# AM_CONDITIONAL(OPENCL, test x${use_opencl} = xyes)
OPENCL=$FALSE
if test "x${use_opencl}" = "xyes"; then
    OPENCL=$TRUE
fi
AC_SUBST(OPENCL)

# specify libxmp path
AC_ARG_WITH(libxml2,
	    [  --with-libxml2=DIR          specify prefix directory for installed libxml2 package (default: /usr)
                              Equivalent to --with-libxml2-include=PATH/include plus --with-libxml2-lib=PATH/lib64],
			      [LIBXML2_PREFIX="${withval}"], [LIBXML2_PREFIX="/usr"])

AC_ARG_WITH(libxml2-include,
	    [  --with-libxml2-include=DIR  specify directory for installed libxml2 include files],
	    [LIBXML2_INCLUDE_DIR="${withval}"], [LIBXML2_INCLUDE_DIR="${LIBXML2_PREFIX}/include/"])

AC_ARG_WITH(libxml2-lib,
	    [  --with-libxml2-lib=DIR      specify directory for installed libxml2 library],
	    [LIBXML2_LIB_DIR="${withval}"], [LIBXML2_LIB_DIR="${LIBXML2_PREFIX}/lib64"])

# check dirs
if ! test -d "$LIBXML2_INCLUDE_DIR"; then
    AC_MSG_ERROR([$LIBXML2_INCLUDE_DIR not found.  Please attach --with-libxml2=<DIR> or --with-libxml2-include=<DIR>.])
fi

if ! test -d "$LIBXML2_LIB_DIR"; then
    LIBXML2_LIB_DIR=${LIBXML2_PREFIX}/lib
fi

if ! test -d "$LIBXML2_LIB_DIR"; then
    AC_MSG_ERROR([$LIBXML2_LIB_DIR not found.  Please attach --with-libxml2=<DIR> or --with-libxml2-lib=<DIR>.])
fi

# check libxml/parser.h
tmp_file=/tmp/_omni_$$
tmp_file_c=/tmp/_omni_$$.c
echo "#include <libxml/parser.h>" > $tmp_file_c
${CC} -E -I$LIBXML2_INCLUDE_DIR/libxml2 $tmp_file_c 2> /dev/null > /dev/null
if test $? -ne 0; then
    rm -f $tmp_file_c
    AC_MSG_ERROR([parser.h not found. Please attach --with-libxml2=<DIR> or --with-libxml2-include=<DIR>.])
fi

# check -lxml2
echo "int main(){return 0;}" > $tmp_file_c
${CC} -L$LIBXML2_LIB_DIR -lxml2 $tmp_file_c -o $tmp_file
if test $? -ne 0; then
    rm -f $tmp_file $tmp_file_c
    AC_MSG_ERROR([-lxml2 not found. Please attach --with-libxml2=<DIR> or --with-libxml2-lib=<DIR>.])
fi
rm -f $tmp_file $tmp_file_c

# specify mpfr path
AC_ARG_WITH(mpfr,
	    [  --with-mpfr=DIR             specify prefix directory for installed mpfr package (default: /usr)
                              Equivalent to --with-mpfr-include=PATH/include and --with-mpfr-lib=PATH/lib64],
			      [MPFR_PREFIX="${withval}"], [MPFR_PREFIX="/usr"])

AC_ARG_WITH(mpfr-include,
	    [  --with-mpfr-include=DIR     specify directory for installed mpfr include files],
	    [MPFR_INCLUDE_DIR="${withval}"], [MPFR_INCLUDE_DIR="${MPFR_PREFIX}/include"])

AC_ARG_WITH(mpfr-lib,
	    [  --with-mpfr-lib=DIR         specify directory for installed mpfr library],
	    [MPFR_LIB_DIR="${withval}"], [MPFR_LIB_DIR="${MPFR_PREFIX}/lib64"])

# specify gmp path
AC_ARG_WITH(gmp,
	    [  --with-gmp=DIR              specify prefix directory for installed gmp package (default: /usr)
                              Equivalent to --with-gmp-include=PATH/include plus --with-gmp-lib=PATH/lib64],
                              [GMP_PREFIX="${withval}"], [GMP_PREFIX="/usr"])

AC_ARG_WITH(gmp-include,
	    [  --with-gmp-include=DIR      specify directory for installed gmp include files],
	    [GMP_INCLUDE_DIR="${withval}"], [GMP_INCLUDE_DIR="${GMP_PREFIX}/include"])

AC_ARG_WITH(gmp-lib,
	    [  --with-gmp-lib=DIR          specify directory for installed gmp library],
	    [GMP_LIB_DIR="${withval}"], [GMP_LIB_DIR="${GMP_PREFIX}/lib64"])

if ! test -d "$GMP_LIB_DIR"; then
  GMP_LIB_DIR=${GMP_PREFIX}/lib
fi

#--------------------------------------------------------------------
# For OpenMP
#--------------------------------------------------------------------
# Check on what system we are running.
HOSTARCH=`./buildutils/config.guess | grep -v Linking`
CPU=`echo $HOSTARCH | awk -F- '{ print $1 }' | sed 's/\./_/g'`
OS=`echo $HOSTARCH | awk -F- '{ print $3 }' | sed 's/\./_/g'`
PPTGT=""
MM5TGT=""

case $CPU in
    i*86)    CPU=i386;;
    x86_64*) CPU=x86_64;;
    alpha*)  CPU=alpha;;
esac

case $OS in
    sunos*)   OS=sunos;;
    solaris*) OS=solaris;;
    freebsd*) OS=freebsd;;
    netbsd*)  OS=netbsd;;
    irix*)    OS=irix;;
    aix*)     OS=aix;;
    darwin*)  OS=darwin;;
    cygwin*)  OS=cygwin32;;
esac

case $HOSTARCH in
    i*86-pc-linux*)        PPTGT=linux;;
    alpha*-unknown-linux*) PPTGT=linux;;
    i386-pc-solaris*)      PPTGT=sol2;;
    sparc-sun-solaris*)    PPTGT=sol2;;
    mips-sgi-irix*)        PPTGT=orig2k;;
esac

AC_SUBST(OS)
AC_SUBST(CPU)
AC_SUBST(MM5TGT)
AC_SUBST(PPTGT)

#--------------------------------------------------------------------
# OpenMP runtime checking
def_thread_type=""
def_lock_type=""
available_threads=""
available_locks=""
ignore_pair=""
ompcLibAsmSrcs=""

case $OS in
    solaris*)
	def_thread_type=solaris
	def_lock_type=spin
	available_locks="mutex spin"
	available_threads="solaris pthread"
	case $CPU in
	    sparc*)
		ompcLibAsmSrcs="asm_sparc.s";;
	esac
	;;
    irix*)
	def_thread_type=sproc
	def_lock_type=spin
	available_locks="mutex spin"
	available_threads="pthread sproc"
	ignore_pair="sproc mutex"
	;;
    *)
	def_thread_type=pthread
	def_lock_type=mutex
	available_locks="mutex"
	available_threads="pthread"
	case $CPU in
	    i386*|mips*)
		def_lock_type=spin
		available_locks="mutex spin";;
	    sparc*)
		def_lock_type=spin
		available_locks="mutex spin"
		ompcLibAsmSrcs="asm_sparc.s";;
	    alpha*)
		def_lock_type=spin
		available_locks="mutex spin"
		ompcLibAsmSrcs="asm_alpha.s";;
	    rs6000*)
		available_locks="mutex spin";;
	    *)
		true;;
	esac
	;;
esac

if test "X${thread_type}" = "X"; then
    thread_type=${def_thread_type}
fi

if test "X${lock_type}" = "X"; then
    lock_type=${def_lock_type}
fi

OMP_THREAD_TYPE=${thread_type}
AC_SUBST(OMP_THREAD_TYPE)
OMP_LOCK_TYPE=${lock_type}
AC_SUBST(OMP_LOCK_TYPE)

case $lock_type in
    spin*)
	case $CPU in
	    i386*|x86_64*|mips*|sparc*|alpha*|rs6000*)
		true;;
	    *)
		AC_MSG_ERROR(["$ac_t"spin lock is only available on i386, x86_64, mips, alpha, sparc and rs6000 architectures.]);;
	esac;;
    *)
	true;;
esac

THREAD_DEF=""
case $thread_type in
    solaris*)
	THREAD_DEF="-DUSE_SOL_THREAD";;
    sproc*)
	THREAD_DEF="-DUSE_SPROC";;
    *)
	THREAD_DEF="-DUSE_PTHREAD";;
esac

LOCK_DEF=""
case $lock_type in
    mutex*)
	LOCK_DEF="";;
    spin*)
	LOCK_DEF="-DUSE_SPIN_LOCK";;
esac

OMPC_LIB_ASM=${ompcLibAsmSrcs}

CPUDEF=-DOMNI_CPU_`echo $CPU | tr '[a-z]' '[A-Z]'`
OSDEF=-DOMNI_OS_`echo $OS | tr '[a-z]' '[A-Z]'`

if test "$target" != "$host"; then
    TARGET_CPU=`echo $target | awk -F- '{ print $1 }' | sed 's/\./_/g'`
    TARGET_CPUDEF=-DOMNI_TARGET_CPU_`echo ${TARGET_CPU} | tr '[a-z]' '[A-Z]'`
fi

debCppFlags=""
if test "x${doDebug}" = "xyes"; then
    CFLAGS="-g -O0"
    FCFLAGS="-g -O0"
    debCppFlags="-DDEBUG"
else
    debCppFlags="-DNDEBUG"
fi

CPPFLAGS="${CPUDEF} ${OSDEF} ${debCppFlags} ${TARGET_CPUDEF}"
AC_SUBST(CPPFLAGS)

CXXFLAGS=$CFLAGS
AC_SUBST(CXXFLAGS)

AH_TEMPLATE(OBJEXT, [object file extension])
AC_DEFINE_UNQUOTED(OBJEXT, "${OBJEXT}")

#--------------------------------------------------------------------
AC_ARG_ENABLE(debug,
  [  --enable-debug          enable generate executable with debug symbol (false default)],
  [doDebug=yes], [doDebug=no])

AC_ARG_ENABLE(openacc,
  [  --enable-openacc        enable OpenACC (false default)],
  [doOpenAcc=yes], [doOpenAcc=no])

AC_ARG_ENABLE(atool,
  [  --enable-atool          enable atool (false default)],
  [doatool=yes], [doatool=no])

AC_ARG_ENABLE(xacc,
  [  --enable-xacc           enable XcalableACC (false default)],
  [doXACC=yes], [doXACC=no])

AC_ARG_ENABLE(mod2xmod,
  [  --enable-mod2xmod       enable to translate .mod to .xmod on only gfortran (false default)],
  [domod2xmod=yes], [domod2xmod=no])

AC_ARG_ENABLE(shared,
  [  --enable-shared         enable to generate shared library (only OpenACC now) (false default)],
  [doshared=yes], [doshared=no])

#--------------------------------------------------------------------
# set defulat platform and device for OpenACC
if test "x${use_cuda}" = "xyes"; then
    ACC_DEFAULT_PLATFORM=CUDA
    ACC_DEFAULT_DEVICE=Fermi
elif test "x${use_opencl}" = "xyes"; then
    ACC_DEFAULT_PLATFORM=OpenCL
    ACC_DEFAULT_DEVICE=Fermi
elif test "x${doOpenAcc}" = "xyes"; then
    AC_MSG_ERROR([CUDA or OpenCL not found. Please attach --with-cuda or --with-opencl.])
fi
AC_SUBST(ACC_DEFAULT_PLATFORM)
AC_SUBST(ACC_DEFAULT_DEVICE)

#--------------------------------------------------------------------
#  General
#--------------------------------------------------------------------
# Trget machine
FJRDMA=$FALSE
KCOMPUTER=$FALSE
FX10=$FALSE
FX100=$FALSE
POWERPC=$FALSE
CRAY=$FALSE
SUPERUX=$FALSE
if test "$target" = "Kcomputer-linux-gnu" -o "$target" = "FX10-linux-gnu" -o "$target" = "FX100-linux-gnu"; then
    FJRDMA=$TRUE
    if test "$target" = "Kcomputer-linux-gnu"; then
        KCOMPUTER=$TRUE
    elif test "$target" = "FX10-linux-gnu"; then
        FX10=$TRUE
    elif test "$target" = "FX100-linux-gnu"; then
        FX100=$TRUE
    fi
elif test "$target" = "powerpc-ibm-cnk" -o "$target" = "powerpc-hitachi-aix"; then
    POWERPC=$TRUE
elif test "$target" = "Cray-linux-gnu"; then
    CRAY=$TRUE
elif test "$target" = "sxace-nec-superux" -o "$target" = "sx9-nec-superux"; then
    SUPERUX=$TRUE
fi

AC_SUBST(FJRDMA)
AC_SUBST(KCOMPUTER)
AC_SUBST(FX10)
AC_SUBST(FX100)
AC_SUBST(POWERPC)
AC_SUBST(CRAY)
AC_SUBST(SUPERUX)

SUPERUX_OR_POWERPC=$FALSE
if test $SUPERUX -eq 0 -o $POWERPC -eq 0; then
    SUPERUX_OR_POWERPC=$TRUE
fi
AC_SUBST(SUPERUX_OR_POWERPC)

TARGET=$target
AC_SUBST(TARGET)

#--------------------------------------------------------------------
# Check basic command
if test "${CPP}" = ""; then
    AC_MSG_ERROR([CPP is not found.])
fi

if test "${CC}" = ""; then
    AC_MSG_ERROR([CC is not found.])
fi

if test "${FC}" = ""; then
    AC_MSG_ERROR([FC is not found.])
fi

if test "${AWK}" = ""; then
    AC_MSG_ERROR([AWK is not found.])
fi

# If yacc is not available, set YACC to 'yacc' in AC_PROG_YACC.
if test "x${YACC}" = "xyacc"; then
    AC_MSG_ERROR([byacc is not found.])
fi

# https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/html_node/Particular-Programs.html
# If lex is not available, set LEX to ':' in "AC_PROG_LEX".
if test "x${LEX}" = "x:"; then
    AC_MSG_ERROR([flex is not found.])
fi

#--------------------------------------------------------------------
# Set OpenACC
# "ACC" defined by AC_SUBST() is used in ./Driver/libexec/ompcc_lib.sh
# Moreover "ACC" defined by AM_CONDITIONAL() is used in ./Makefile.in
ACC=$FALSE
if test "x${doOpenAcc}" = "xyes"; then
    ACC=$TRUE
fi
AC_SUBST(ACC)

#--------------------------------------------------------------------
# Set XcalableACC
XACC=$FALSE
if test "x${doXACC}" = "xyes"; then
    XACC=$TRUE
fi
AC_SUBST(XACC)

#--------------------------------------------------------------------
# set ATOOLS
ATOOL=$FALSE
if test "x${doatool}" = "xyes"; then
    ATOOL=$TRUE
fi
AC_SUBST(ATOOL)

#--------------------------------------------------------------------
# set SHARED
SHARED=$FALSE
if test "x${doshared}" = "xyes"; then
   SHARED=$TRUE
fi
AC_SUBST(SHARED)

# --------------------------------------------------------------------
# Set compilers and their options:
#   The following operation sets 3 kinds of compiler and their options.
#
# (1) Local compiler (for compiling C_Front and so on)
#   CC, FC, CFLAGS, FCFLAGS, ...
#
# (2) Native compiler (for compiling libxmp and so on) to cross compile
#  MPI_CC, MPI_FC, MPI_CFLAGS, MPI_FCFLAGS, ...
#
# (3) Omni compiler (for using xmpcc and xmpf90 commands)
#  OMNI_XXX_CFLAGS, OMNI_XXX_FCFLAGS, ...
#    "XXX" is a phase name.
#
# Note that:
#  MPI_CFLAGS needs options for OpenMP and strong optimization (e.g. -O2) and C99.
#  MPI_FCFLAGS needs an option for strong optimization (e.g. -O2).
#
#  Prefix "OMNI_" options should set minimal options as possible.
#  OMNI_C_PP, Pre-processor command, needs an option for C99.
#  OMNI_NTV_CFLAGS needs an option for C99 support.
#  OMNI_LNK_CFLAGS and OMNI_LNK_FCFLAGS need an option for OpenMP.

# Memo:
#   Name rule for --target=machine-[vendor-]operatingsystem
#   It contains three fields: the name of the CPU family/model, the vendor, and the operating system name.
#   But, the vendor field is mostly unused.
#   Refer: http://wiki.osdev.org/Target_Triplet

if test "$target" = "Kcomputer-linux-gnu" -o "$target" = "FX10-linux-gnu" -o "$target" = "FX100-linux-gnu"; then
    # OpenMP
    OPENMP_OPT_C="-Kopenmp"
    OPENMP_OPT_F=$OPENMP_OPT_C

    # XcalableMP
    XMPC_DEF="-D_XCALABLEMP"
    XMPF_DEF="-D_XCALABLEMP"

    # MPI C
    AC_CHECK_PROG([MPI_CC], [mpifccpx], [mpifccpx])
    MPI_CFLAGS="-Kfast,openmp -Xg -noansi"
    MPI_CPPFLAGS="-E -Xg -noansi"
    MPI_CLIBS=""

    # MPI F
    AC_CHECK_PROG([MPI_FC], [mpifrtpx], [mpifrtpx])
    MPI_FPPFLAGS="-E -Cpp"
    MPI_FCFLAGS="-Kfast,openmp"
    MPI_MODINC="-M"
    MPI_FCLIBS=""
    KIND_MPI_FORTRAN=other

    # Omni C
    OMNI_C2X_FLAGS=""
    OMNI_NTV_CFLAGS="-Xg -noansi"
    OMNI_LNK_CFLAGS="$OMNI_NTV_CFLAGS $OPENMP_OPT_C"

    # Omni F
    OMNI_F2X_FLAGS=""
    OMNI_NTV_FCFLAGS="-Free"
    OMNI_LNK_FCFLAGS="$OMNI_NTV_FCFLAGS $OPENMP_OPT_F"

    # Omni Common
    OMNI_X2X_FLAGS=""

    # ranlib & ar & nm
    AC_CHECK_PROG([RANLIB], [ranlibpx], [ranlibpx], [ranlib])
    AC_CHECK_PROG([AR], [arpx], [arpx], [ar])
    ARFLAGS="cru"
    AC_CHECK_PROG([NM], [nmpx], [nmpx], [nm])

elif test "$target" = "MIC-linux-gnu"; then
    # OpenMP
    OPENMP_OPT_C="-mp"
    OPENMP_OPT_F=$OPENMP_OPT_C

    # XcalableMP
    XMPC_DEF="-D_XCALABLEMP"
    XMPF_DEF="-D_XCALABLEMP"

    # MPI C
    AC_CHECK_PROG([MPI_CC], [mpiicc], [mpiicc])
    MPI_CPPFLAGS="-E -std=gnu99"
    MPI_CFLAGS="-fast $OPENMP_OPT_C"
    MPI_CLIBS=""

    # MPI F
    AC_CHECK_PROG([MPI_FC], [mpiifort], [mpiifort])
    MPI_FPPFLAGS="-E -cpp"
    MPI_FCFLAGS="-fast $OPENMP_OPT_F"
    MPI_MODINC="-module"
    MPI_FCLIBS=""
    KIND_MPI_FORTRAN=other

    # Omni C
    OMNI_C2X_FLAGS=""
    OMNI_NTV_CFLAGS="-std=gnu99"
    OMNI_LNK_CFLAGS="$OMNI_NTV_CFLAGS $OPENMP_OPT_C"
    
    # Omni F
    OMNI_F2X_FLAGS=""
    OMNI_NTV_FCFLAGS=""
    OMNI_LNK_FCFLAGS="$OMNI_NTV_FCFLAGS $OPENMP_OPT_F"

    # Omni Common
    OMNI_X2X_FLAGS=""

    # ranlib & ar & nm
    AC_CHECK_PROG([RANLIB], [ranlib], [ranlib])
    AC_CHECK_PROG([AR], [ar], [ar])
    ARFLAGS="cru"
    AC_CHECK_PROG([NM], [nm], [nm])

elif test "$target" = "Cray-linux-gnu"; then
    # OpenMP
    OPENMP_OPT_C="-h omp"
    OPENMP_OPT_F=$OPENMP_OPT_C

    # XcalableMP
    XMPC_DEF="-D_XCALABLEMP"
    XMPF_DEF="-D_XCALABLEMP"

    # MPI C
    AC_CHECK_PROG([MPI_CC], [cc], [cc])
    MPI_CPPFLAGS="-E -D_XMP_CRAY"
    MPI_CFLAGS="-O2 -hgnu $OPENMP_OPT_C"
    MPI_CLIBS=""

    # MPI F
    AC_CHECK_PROG([MPI_FC], [ftn], [ftn])
    MPI_FPPFLAGS="-E -cpp"
    MPI_FCFLAGS="-O2 $OPENMP_OPT_F"
    MPI_MODINC="-J"
    MPI_FCLIBS=""
    KIND_MPI_FORTRAN=other

    # Omni C
    OMNI_C2X_FLAGS=""
    OMNI_NTV_CFLAGS="-hgnu -D_XMP_CRAY"
    OMNI_LNK_CFLAGS="$OMNI_NTV_CFLAGS $OPENMP_OPT_C"

    # Omni F
    OMNI_F2X_FLAGS=""
    OMNI_NTV_FCFLAGS="-f free"
    OMNI_LNK_FCFLAGS="$OMNI_NTV_FCFLAGS $OPENMP_OPT_F"

    # Omni Common
    OMNI_X2X_FLAGS=""

    # ranlib & ar & nm
    AC_CHECK_PROG([RANLIB], [ranlib], [ranlib])
    AC_CHECK_PROG([AR], [ar], [ar])
    ARFLAGS="cru"
    AC_CHECK_PROG([NM], [nm], [nm])

elif test "$target" = "sxace-nec-superux"; then
    # OpenMP
    OPENMP_OPT_C="-Popenmp"
    OPENMP_OPT_F=$OPENMP_OPT_C

    # XcalableMP
    XMPC_DEF="-D_XCALABLEMP"
    XMPF_DEF="-D_XCALABLEMP"

    # MPI C
    AC_CHECK_PROG([MPI_CC], [sxmpic++], [sxmpic++])
    MPI_CPPFLAGS="-E"
    #  MPI_CFLAGS="-Chopt $OPENMP_OPT_C"  # Don't use OpenMP option because of SX-ACE bug [Xmp-dev:5418].
    MPI_CFLAGS="-Chopt"
    MPI_CLIBS=""
    
    # MPI F
    AC_CHECK_PROG([MPI_FC], [sxmpif90], [sxmpif90])
    # Fix:[Xmp-dev:5723] [xmp-bts:0432]
    MPI_FPPFLAGS="-P -D__SX__ -D_FLOAT0 -I."
    MPI_FCFLAGS="-Chopt -f2003 -Wf,-ptr,byte -dW"  # Fix: [xmp-bts:0475]
    MPI_MODINC="-to"
    MPI_FCLIBS=""
    KIND_MPI_FORTRAN=other

    # Omni C
    OMNI_C2X_FLAGS=""
    OMNI_NTV_CFLAGS="-Kgcc -w"
    OMNI_LNK_CFLAGS="$OMNI_NTV_CFLAGS $OPENMP_OPT_C"

    # Omni F
    OMNI_F2X_FLAGS=""
    OMNI_NTV_FCFLAGS="-f4 -w -f2003 -Wf,-ptr,byte -dW" # Fix: [xmp-bts:0475]
    OMNI_LNK_FCFLAGS="$OMNI_NTV_FCFLAGS $OPENMP_OPT_F"

    # Omni Common
    OMNI_X2X_FLAGS=""

    # ranlib & ar & nm
    RANLIB="sxar -sq"
    AC_CHECK_PROG([AR], [sxar], [sxar], [sxar])
    ARFLAGS="cru"
    NM="sxnm"
    NM_OPT="-px"
    #  AC_CHECK_PROG([NM], [sxnm], [sxnm], [sxnm])

elif test "$target" = "sx9-nec-superux"; then
    # OpenMP
    OPENMP_OPT_C="-Popenmp"
    OPENMP_OPT_F=$OPENMP_OPT_C

    # XcalableMP
    XMPC_DEF="-D_XCALABLEMP"
    XMPF_DEF="-D_XCALABLEMP"

    # MPI C
    AC_CHECK_PROG([MPI_CC], [sxmpic++], [sxmpic++])
    MPI_CPPFLAGS="-E"
    MPI_CFLAGS="-Chopt $OPENMP_OPT_C"
    MPI_CLIBS=""

    # MPI F
    AC_CHECK_PROG([MPI_FC], [sxmpif90], [sxmpif90])
    MPI_FPPFLAGS="-E -cpp"
    MPI_FCFLAGS="-Chopt -f2003 $OPENMP_OPT_F -Wf,-ptr,byte"
    MPI_MODINC="-to"
    MPI_FCLIBS=""
    KIND_MPI_FORTRAN=other

    # Omni C
    OMNI_C2X_FLAGS=""
    OMNI_NTV_CFLAGS="-Kgcc -w"
    OMNI_LNK_CFLAGS="$OMNI_NTV_CFLAGS $OPENMP_OPT_C"

    # Omni F
    OMNI_F2X_FLAGS=""
    OMNI_NTV_FCFLAGS="-f4 -w -Wf,-ptr,byte"
    OMNI_LNK_FCFLAGS="$OMNI_NTV_FCFLAGS $OPENMP_OPT_F"

    # Omni Common
    OMNI_X2X_FLAGS=""

    # ranlib & ar & nm
    RANLIB="sxar -sq"
    AC_CHECK_PROG([AR], [sxar], [sxar], [sxar])
    ARFLAGS="cru"
    NM="sxnm"
    NM_OPT="-px"
    #  AC_CHECK_PROG([NM], [sxnm], [sxnm], [sxnm])

elif test "$target" = "powerpc-ibm-cnk"; then
    # These options are referred to https://scwwwb.kek.jp/index.html

    # OpenMP
    OPENMP_OPT_C="-qsmp=omp"
    OPENMP_OPT_F=$OPENMP_OPT_C

    # XcalableMP
    XMPC_DEF="-D_XCALABLEMP"
    XMPF_DEF="-WF,-D_XCALABLEMP"

    # MPI C
    AC_CHECK_PROG([MPI_CC], [mpixlcxx_r], [mpixlcxx_r])

    MPI_CPPFLAGS="-E --std=c99"

    if test -d "/bgsys/drivers/ppcfloor/comm/include"; then
	MPI_CPPFLAGS="$MPI_CPPFLAGS -I/bgsys/drivers/ppcfloor/comm/include"
    fi

    MPI_CFLAGS="-O3 -qhot -qsimd=auto -q64 -qsource -qlist $INC_PATH $OPENMP_OPT_C"

    if test -f /usr/local/bg/lib/libkek.a; then
	MPI_CLIBS="/usr/local/bg/lib/libkek.a"
    fi

    if test -f /bgsys/drivers/ppcfloor/bgpm/lib/libbgpm.a; then
	MPI_CLIBS="$MPI_CLIBS /bgsys/drivers/ppcfloor/bgpm/lib/libbgpm.a"
    fi

    # MPI F
    AC_CHECK_PROG([MPI_FC], [mpixlf90_r], [mpixlf90_r])

    MPI_FPPFLAGS="-E -cpp"
    MPI_FCFLAGS="-O3 -qhot -qsimd=auto -q64 -qsource -qlist -qextname $INC_PATH $OPENMP_OPT_F"
    MPI_MODINC="-I"

    INC_PATH="/usr/local/bg/include"
    if test -d $INC_PATH; then
	MPI_CFLAGS="$MPI_CFLAGS -I$INC_PATH"
	MPI_FCFLAGS="$MPI_FCFLAGS -I$INC_PATH"
    fi

    MPI_FCLIBS=$MPI_CLIBS
    KIND_MPI_FORTRAN=other

    # Omni C
    OMNI_C2X_FLAGS=""
    OMNI_NTV_CFLAGS="-q64 -qipa"
    OMNI_LNK_CFLAGS="$OMNI_NTV_CFLAGS $OPENMP_OPT_C $MPI_CLIBS"

    # Omni F
    OMNI_F2X_FLAGS=""
    OMNI_NTV_FCFLAGS="-q64 -qipa -qextname"
    OMNI_LNK_FCFLAGS="$OMNI_NTV_FCFLAGS $OPENMP_OPT_F $MPI_CLIBS"

    # Omni Common
    OMNI_X2X_FLAGS=""

    # ranlib & ar & nm
    AC_CHECK_PROG([RANLIB], [ranlib], [ranlib])
    AC_CHECK_PROG([AR], [ar], [ar])
    ARFLAGS="cru"
    AC_CHECK_PROG([NM], [nm], [nm])

elif test "$target" = "powerpc-hitachi-aix"; then
    # OpenMP
    OPENMP_OPT_C="-qsmp=omp"
    OPENMP_OPT_F=$OPENMP_OPT_C

    # XcalableMP
    XMPC_DEF="-D_XCALABLEMP"
    XMPF_DEF="-WF,-D_XCALABLEMP"

    # MPI C
    AC_CHECK_PROG([MPI_CC], [mpCC_r], [mpCC_r])
    MPI_CPPFLAGS="-E"
    MPI_CFLAGS="-q64 -qhot -qsimd=auto -O5 $OPENMP_OPT_C"
    MPI_CLIBS=""

    # MPI F
    AC_CHECK_PROG([MPI_FC], [mpxlf90_r], [mpxlf90_r])
    MPI_FPPFLAGS="-E -cpp"
    MPI_FCFLAGS="-q64 -qhot -qsimd=auto -O5 -qextname $OPENMP_OPT_F"
    MPI_MODINC="-I"
    MPI_FCLIBS=""
    KIND_MPI_FORTRAN=other

    # Omni C
    OMNI_C2X_FLAGS=""
    OMNI_NTV_CFLAGS="-q64"
    OMNI_LNK_CFLAGS="$OMNI_NTV_CFLAGS $OPENMP_OPT_C"

    # Omni F
    OMNI_F2X_FLAGS=""
    OMNI_NTV_FCFLAGS="-q64 -qextname"
    OMNI_LNK_FCFLAGS="$OMNI_NTV_FCFLAGS $OPENMP_OPT_F"

    # Omni Common
    OMNI_X2X_FLAGS=""

    # ranlib & ar & nm
    AC_CHECK_PROG([RANLIB], [ranlib], [ranlib])
    AC_CHECK_PROG([AR], [ar], [ar])
    ARFLAGS="-X32_64 cru"
    AC_CHECK_PROG([NM], [nm], [nm])

else
    # ranlib & ar & nm
    AC_CHECK_PROG([RANLIB], [ranlib], [ranlib])
    AC_CHECK_PROG([AR], [ar], [ar])
    ARFLAGS="cru"
    AC_CHECK_PROG([NM], [nm], [nm])

    # C
    AC_CHECK_PROG([MPI_CC], [mpiicc], [mpiicc])
    AC_CHECK_PROG([MPI_CC], [mpicc], [mpicc])

    chk=`${MPI_CC} --version | head -n1`
    case $chk in
	cc* | gcc* | Apple*)
	    # OpenMP
	    OPENMP_OPT_C="-fopenmp"

	    # XcalableMP
	    XMPC_DEF="-D_XCALABLEMP"

	    # MPI C
	    MPI_CPPFLAGS="-E -std=gnu99"
	    MPI_CFLAGS="-O2 -std=gnu99 -Wall -Wpointer-arith $OPENMP_OPT_C"
	    MPI_CLIBS=""

	    # Omni C
	    OMNI_C2X_FLAGS=""
	    OMNI_NTV_CFLAGS="-std=gnu99 -lm"
	    OMNI_LNK_CFLAGS="$OMNI_NTV_CFLAGS $OPENMP_OPT_C"

	    # Omni Common
	    OMNI_X2X_FLAGS="-gnu"
	    ;;
	*ICC*)
	    # OpenMP
	    OPENMP_OPT_C="-fopenmp"

	    # XcalableMP
	    XMPC_DEF="-D_XCALABLEMP"

	    # MPI C
	    ver=`$MPI_CC --version 2> /dev/null | head -n1`
	    case $ver in
		*15*)
		    MPI_CPPFLAGS="-E -std=gnu99 -no-gcc" ;;
		*)
		    MPI_CPPFLAGS="-E -std=gnu99" ;;
	    esac
	    MPI_CFLAGS="-O2 -std=gnu99 -Wall -Wpointer-arith $OPENMP_OPT_C"
	    MPI_CLIBS=""

	    # Omni C
	    OMNI_C2X_FLAGS=""
	    OMNI_NTV_CFLAGS="-std=gnu99"
	    OMNI_LNK_CFLAGS="$OMNI_NTV_CFLAGS $OPENMP_OPT_C"

	    # Omni Common
	    OMNI_X2X_FLAGS="-intel"
	    ;;
	*)
	    chk2=`$MPI_CC --version 2> /dev/null | head -n2 | tail -n1`
	    case $chk2 in
		pgcc*)
		    # OpenMP
		    OPENMP_OPT_C="-mp"

		    # XcalableMP
		    XMPC_DEF="-D_XCALABLEMP"

		    # MPI C
		    MPI_CPPFLAGS="-E -c99"
		    MPI_CFLAGS="-fast -c99 $OPENMP_OPT_C"
		    MPI_CLIBS=""

		    # Omni C
		    OMNI_C2X_FLAGS="--no-builtin-va-arg"
		    OMNI_NTV_CFLAGS="-D_XMP_PGI"
		    OMNI_LNK_CFLAGS="$OMNI_NTV_CFLAGS $OPENMP_OPT_C"

		    # Omni Common
		    OMNI_X2X_FLAGS=""

		    # Special options
		    #     IS_PGI="Yes"
		    #     AC_SUBST(IS_PGI)
		    ;;
		*)
		    echo "No supported C compiler was found."
		    echo "This program supports following MPI compilers."
		    echo " - GNU Compiler (mpicc)"
		    echo " - Intel Compiler (mpiicc)"
		    echo " - PGI Compiler (mpicc)"
		    echo " - Fujitsu Compiler (mpifccpx)"
		    echo " - Cray Compiler (cc)"
		    echo " - NEC Compiler (sxmpic++)"
		    echo " - IBM Compiler (mpixlcxx_r)"
		    echo " - HITACHI Compiler (mpCC_r)"
		    exit 1 ;;
	    esac ;;
    esac

    # Fortran
    AC_CHECK_PROG([MPI_FC], [mpiifort], [mpiifort])
    AC_CHECK_PROG([MPI_FC], [mpif90], [mpif90])

    chk=`${MPI_FC} --version | head -n1`
    case $chk in
	"GNU Fortran"*)
	    # OPENMP
	    OPENMP_OPT_F="-fopenmp"

	    # XcalableMP
	    XMPF_DEF="-D_XCALABLEMP"

	    # MPI F
	    MPI_FPPFLAGS="-E -cpp"
	    MPI_FCFLAGS="-O2 $OPENMP_OPT_F"
	    MPI_MODINC="-J"
	    MPI_FCLIBS=""
	    KIND_MPI_FORTRAN=gfortran

	    # Omni F
	    OMNI_F2X_FLAGS=""
	    OMNI_NTV_FCFLAGS="-ffree-form -fcray-pointer"
	    OMNI_LNK_FCFLAGS="$OMNI_NTV_FCFLAGS $OPENMP_OPT_F -lgomp"
	    ;;
	*IFORT*)
	    # OpenMP
	    OPENMP_OPT_F="-fopenmp"

	    # XcalableMP
	    XMPF_DEF="-D_XCALABLEMP"

	    # MPI F
	    MPI_FPPFLAGS="-E -cpp"
	    MPI_FCFLAGS="-O2 $OPENMP_OPT_F"
	    MPI_MODINC="-module"
	    MPI_FCLIBS=""
	    KIND_MPI_FORTRAN=other

	    # Omni F
	    OMNI_F2X_FLAGS=""
	    OMNI_NTV_FCFLAGS=""
	    OMNI_LNK_FCFLAGS="$OMNI_NTV_FCFLAGS $OPENMP_OPT_F"
	    ;;
	*)
	    chk2=`$MPI_FC --version 2> /dev/null | head -n2 | tail -n1`
	    case $chk2 in
		pgfortran*|pgf90*)
		    # OpenMP
		    OPENMP_OPT_F="-mp"

		    # XcalableMP
		    XMPF_DEF="-D_XCALABLEMP"

		    # MPI F
		    MPI_FPPFLAGS="-E -Mpreprocess"
		    MPI_FCFLAGS="-fast $OPENMP_OPT_F"
		    MPI_MODINC="-module"
		    MPI_FCLIBS=""
		    KIND_MPI_FORTRAN=other

		    # Omni F
		    OMNI_F2X_FLAGS=""
		    OMNI_NTV_FCFLAGS=""
		    OMNI_LNK_FCFLAGS="$OMNI_NTV_FCFLAGS $OPENMP_OPT_F"

		    # Omni Common
		    OMNI_X2X_FLAGS=""
		    ;;
		*)
		    echo "No supported compiler was found."
		    echo "This program supports following MPI Fortran compilers."
		    echo " - GNU Compiler (mpif90)"
		    echo " - Intel Compiler (mpiifort)"
		    echo " - PGI Compiler (mpif90)"
		    echo " - Fujitsu Compiler (mpifrtpx)"
		    echo " - Cray Compiler (ftn)"
		    echo " - NEC Compiler (sxmpif90)"
		    echo " - IBM Compiler (mpixlf90_r)"
		    echo " - HITACHI Compiler (mpif90)"
		    exit 1 ;;
	    esac ;;
    esac
fi
AC_SUBST(ARFLAGS)

#--------------------------------------------------------------------
# set BLAS
AC_ARG_WITH(libblas,
            [  --with-libblas=DIR          BLAS Library (e.g. /foo/blas_LINUX.a)],
            [LIBBLAS="${withval}"; use_libblas=yes], [use_libblas=no])

AC_ARG_ENABLE(SSL2BLAMP,
              [  --enable-SSL2BLAMP      enable Fujitsu Math Library (true on only the K computer, false on Fx10)],
              [use_SSL2BLAMP=yes], [use_SSL2BLAMP=no])

AC_ARG_ENABLE(intelmkl,
              [  --enable-intelmkl       enable Intel Math Kernel Library (false default)],
              [use_intelmkl=yes], [use_intelmkl=no])

output_libblas=
if test x$use_libblas = xyes; then
    if ! test -f $LIBBLAS; then
        AC_MSG_ERROR([$LIBBLAS not found.])
    fi
    output_libblas="yes ($LIBBLAS)"
else
    if test "$target" = "Kcomputer-linux-gnu" -o x$use_SSL2BLAMP = "xyes"; then
        use_libblas=yes
        use_SSL2BLAMP=yes
        LIBBLAS="-SSL2BLAMP"
        output_libblas="yes ($LIBBLAS)"
    elif test x$use_intelmkl = "xyes"; then
        use_libblas=yes
        LIBBLAS="-mkl"
        output_libblas="yes ($LIBBLAS)"
    else
        output_libblas="no"
    fi
fi
OMNI_LNK_CFLAGS="$OMNI_LNK_CFLAGS $LIBBLAS"
OMNI_LNK_FCFLAGS="$OMNI_LNK_FCFLAGS $LIBBLAS"

LIBBLAS=$FALSE
if test x${use_libblas} = xyes; then
    LIBBLAS=$TRUE
fi

SSL2BLAMP=$FALSE
if test x${use_SSL2BLAMP} = xyes; then
    SSL2BLAMP=$TRUE
fi

INTELMKL=$FALSE
if test x${use_intelmkl} = xyes; then
    INTELMKL=$TRUE
fi

# set TCA
AC_ARG_WITH(TCA,
            [  --with-TCA=DIR              TCA installation path],
            [TCA_PREFIX="${withval}"; use_tca=yes], [use_tca=no])

if test x$use_tca = xyes; then
    if ! test -f $TCA_PREFIX/include/tca-api.h; then
            AC_MSG_ERROR([$TCA_PREFIX/include/tca-api.h not found. Please check --with-TCA=<DIR>])
    fi

    MPI_CPPFLAGS="${MPI_CPPFLAGS} -I${TCA_PREFIX}/include"
    MPI_CFLAGS="${MPI_CFLAGS} -I${TCA_PREFIX}/include"
    MPI_CLIBS="${MPI_CLIBS} -L${TCA_PREFIX}/lib -ltca"
    OMNI_LNK_CFLAGS="$OMNI_LNK_CFLAGS ${MPI_CLIBS}"
fi

TCA=$FALSE
if test x${use_tca} = xyes; then
    TCA=$TRUE
fi

# specify GASNet path
AC_ARG_WITH(gasnet,
            [  --with-gasnet=DIR           GASNet installation path],
            [GASNET_PREFIX="${withval}"; use_gasnet=yes], [use_gasnet=no])

if test x$use_gasnet = xyes; then
    if ! test -f "${GASNET_PREFIX}/include/gasnet.h"; then
        AC_MSG_ERROR([${GASNET_PREFIX}/include/gasnet.h not found. Please check --with-gasnet])
    fi
fi

GASNET=$FALSE
if test x${use_gasnet} = xyes; then
    GASNET=$TRUE
fi

AC_ARG_WITH(gasnet_conduit,
            [  --with-gasnet-conduit=NAME  GASNet conduit],
            [GASNET_CONDUIT="${withval}"], [GASNET_CONDUIT="${default_gasnet_conduit}"])

if test x${use_gasnet} = xyes; then
    gasnet_conduit_flag=no
    if test "${GASNET_CONDUIT}" = ""; then
        for c in smp udp mpi gm lapi elan vapi pami ibv portals gemini shmem dcmf sci
        do
            if test -d ${GASNET_PREFIX}/include/${c}-conduit; then
                GASNET_CONDUIT=${c}
                gasnet_conduit_flag=yes
            fi
        done
    else
        gasnet_conduit_flag=yes
    fi

    if test "${gasnet_conduit_flag}" = no || ! test -d $GASNET_PREFIX/include/${GASNET_CONDUIT}-conduit; then
        AC_MSG_ERROR([${GASNET_PREFIX}/include/${GASNET_CONDUIT}-conduit not found. Please attach or check --with-gasnet-conduit])
    else
    # Create temporary Makefile to set $(GASNET_CPPFLAGS) $(GASNET_CFLAGS) $(GASNET_LDFLAGS) $(GASNET_LIBS)
        __ECHO=""
        if test $OS = "darwin"; then
            __ECHO="echo"
        else
            __ECHO="echo -e"
        fi
        tmp_file=_XMP_makefile.$$
        mak_file=${GASNET_PREFIX}/include/${GASNET_CONDUIT}-conduit/${GASNET_CONDUIT}-seq.mak

        $__ECHO "include ${mak_file}\nall:\n\t@echo \$(GASNET_CPPFLAGS)" > ${tmp_file}
        GASNET_CPPFLAGS=`make -s -f ${tmp_file} 2>/dev/null`

        $__ECHO "include ${mak_file}\nall:\n\t@echo \$(GASNET_CFLAGS)"   > ${tmp_file}
        GASNET_CFLAGS=`make -s -f ${tmp_file} 2>/dev/null`

        $__ECHO "include ${mak_file}\nall:\n\t@echo \$(GASNET_LDFLAGS)"  > ${tmp_file}
        GASNET_LDFLAGS=`make -s -f ${tmp_file} 2>/dev/null`

        $__ECHO "include ${mak_file}\nall:\n\t@echo \$(GASNET_LIBS)"     > ${tmp_file}
        GASNET_LIBS=`make -s -f ${tmp_file} 2>/dev/null`

	rm ${tmp_file}
	unset __ECHO
    fi
    MPI_CFLAGS="${MPI_CFLAGS} ${GASNET_CFLAGS} ${GASNET_CPPFLAGS}"
    MPI_CLIBS="${MPI_CLIBS} ${GASNET_LDFLAGS} ${GASNET_LIBS}"
    OMNI_LNK_CFLAGS="${OMNI_LNK_CFLAGS} ${GASNET_LIBS}"
    OMNI_LNK_FCFLAGS="${OMNI_LNK_FCFLAGS} ${GASNET_LIBS}"
    TCA_PREFIX="${TCA_PREFIX}"
fi

AC_SUBST(GPU_CMD)
AC_SUBST(GPU_CFLAGS)
AC_SUBST(CUDA_PREFIX)
AC_SUBST(OPENCL_PREFIX)
AC_SUBST(ACC_DEFAULT_PLATFORM)
AC_SUBST(ACC_DEFAULT_DEVICE)
AC_SUBST(LIBXML2_INCLUDE_DIR)
AC_SUBST(LIBXML2_LIB_DIR)
AC_SUBST(LIBBLAS)
AC_SUBST(SSL2BLAMP)
AC_SUBST(INTELMKL)
AC_SUBST(TCA)
AC_SUBST(TCA_PREFIX)
AC_SUBST(GASNET)
AC_SUBST(GASNET_LIBS)

#--------------------------------------------------------------------
# Set user defined value.
if test "${userMPI_CFLAGS}" != ""; then
    MPI_CFLAGS="${userMPI_CFLAGS}"
fi

if test "${userCFLAGS}" != ""; then
    CFLAGS="${userCFLAGS}"
    echo ${userCFLAGS}
    sleep 1
else
    if test "$target" = "powerpc-hitachi-aix"; then
	CFLAGS="${CFLAGS} -maix64"
    fi
    chk=`${CC} --version | head -n1`
    case $chk in
	cc* | gcc* | Apple* | *ICC*)
	    CFLAGS="${CFLAGS} -std=gnu99 -Wall -Wpointer-arith"
	    ;;
	*)
	    chk2=`${CC} --version 2> /dev/null | head -n2 | tail -n1`
	    case $chk2 in
		pgcc*)
		    CFLAGS="${CFLAGS} -c99"
		    ;;
		*)
		    AC_MSG_ERROR([No supported C compiler was found.]);;
	    esac ;;
    esac
fi

#--------------------------------------------------------------------
# set userflags
if test -z ${MPI_CPP}; then
    if test "$target" = "powerpc-ibm-cnk"; then
	# $MPI_CC cannot be used for XcodeML bug in powerpc-ibm-cnk.
	# Instead of $MPI_CC, $CC (gcc) is used.
	# But, this is not a good idea. Wish to fix the bug.
	MPI_CPP="${CC}"
    elif test "$target" = "sxace-nec-superux"; then
	MPI_CPP=sxcpp
    else
	MPI_CPP="${MPI_CC}"
    fi
fi

if test -z ${MPI_FPP}; then
    if test "$target" = "sxace-nec-superux"; then
	# Fix:[Xmp-dev:5723] [xmp-bts:0432]
	MPI_FPP=sxcpp
    else
	MPI_FPP="${MPI_FC}"
    fi
fi

if test "" != "${userFCFLAGS}"; then
    FCFLAGS="${userFCFLAGS}"
fi

if test "" != "${userMPI_CPPFLAGS}"; then
    MPI_CPPFLAGS="${userMPI_CPPFLAGS}"
fi

if test "" != "${userMPI_CLIBS}"; then
    MPI_CLIBS="${userMPI_CLIBS}"
fi

if test "" != "${userMPI_FPPFLAGS}"; then
    MPI_FPPFLAGS="${userMPI_FPPFLAGS}"
fi

if test "" != "${userMPI_FCFLAGS}"; then
    MPI_FCFLAGS="${userMPI_FCFLAGS}"
fi

if test "" != "${userMPI_FCLIBS}"; then
    MPI_FCLIBS="${userMPI_FCLIBS}"
fi

# OpenMP
AC_SUBST(OPENMP_OPT_C)
AC_SUBST(OPENMP_OPT_F)

# XcalableMP
AC_SUBST(XMPC_DEF)
AC_SUBST(XMPF_DEF)

# MPI C
AC_SUBST(MPI_CC)
AC_SUBST(MPI_CPP)
AC_SUBST(MPI_CPPFLAGS)
AC_SUBST(MPI_CFLAGS)
AC_SUBST(MPI_CLIBS)

# MPI F
AC_SUBST(MPI_FC)
AC_SUBST(MPI_FPP)
AC_SUBST(MPI_FPPFLAGS)
AC_SUBST(MPI_FCFLAGS)
AC_SUBST(MPI_MODINC)
AC_SUBST(MPI_FCLIBS)

# Omni C
AC_SUBST(OMNI_C2X_FLAGS)
AC_SUBST(OMNI_NTV_CFLAGS)
AC_SUBST(OMNI_LNK_CFLAGS)

# Omni F
OMNI_F_PP="$MPI_FPP $MPI_FPPFLAGS"
AC_SUBST(OMNI_F_PP)
AC_SUBST(OMNI_F2X_FLAGS)
AC_SUBST(OMNI_NTV_FCFLAGS)
AC_SUBST(OMNI_LNK_FCFLAGS)

# Omni Common
AC_SUBST(OMNI_X2X_FLAGS)

# ranlib & ar & nm
AC_SUBST(RANLIB)
AC_SUBST(AR)
AC_SUBST(NM)
AC_SUBST(NM_OPT)

#--------------------------------------------------------------------
# check --enable-mod2xmod
if test "$domod2xmod" = "yes" -a "$KIND_MPI_FORTRAN" = "other"; then
    AC_MSG_ERROR("--enable-mod2xmod option can be used when Backend compiler is gfortran.")
fi

IS_MOD2XMOD=no
if test "$domod2xmod" = "yes" -a "$KIND_MPI_FORTRAN" = "gfortran"; then
    IS_MOD2XMOD=yes
fi

MOD2XMOD=$FALSE
if test "$IS_MOD2XMOD" = "yes"; then
    MOD2XMOD=$TRUE
fi
AC_SUBST(MOD2XMOD)

if test "$IS_MOD2XMOD" = "yes"; then
    #### GMP ####
    # check dirs
    if ! test -d "$GMP_INCLUDE_DIR"; then
	AC_MSG_ERROR([$GMP_INCLUDE_DIR not found.  Please attach --with-gmp=<DIR> or --with-gmp-include=<DIR>.])
    fi

    if ! test -d "$GMP_LIB_DIR"; then
      AC_MSG_ERROR([$GMP_LIB_DIR not found.  Please attach --with-gmp=<DIR> or --with-gmp-lib=<DIR>.])
    fi

    # check gmp.h
    tmp_file=/tmp/_omni_$$
    tmp_file_c=/tmp/_omni_$$.c
    echo "#include <gmp.h>" > $tmp_file_c
    ${CC} -E -I$GMP_INCLUDE_DIR $tmp_file_c 2> /dev/null > /dev/null
    if test $? -ne 0; then
	rm -f $tmp_file_c
	AC_MSG_ERROR([gmp.h not found. Please attach --with-gmp=<DIR> or --with-gmp-include=<DIR>.])
    fi
    
    # check -lgmp
    echo "int main(){return 0;}" > $tmp_file_c
    ${CC} -L$GMP_LIB_DIR -lgmp $tmp_file_c -o $tmp_file
    if test $? -ne 0; then
	rm -f $tmp_file $tmp_file_c
	AC_MSG_ERROR([-lgmp not found. Please attach --with-gmp=<DIR> or --with-gmp-lib=<DIR>.])
    fi
    rm -f $tmp_file $tmp_file_c

    AC_SUBST(GMP_INCLUDE_DIR)
    AC_SUBST(GMP_LIB_DIR)

    #### MPFR ####
    # check dirs
    if ! test -d "$MPFR_INCLUDE_DIR"; then
	AC_MSG_ERROR([$MPFR_INCLUDE_DIR not found.  Please attach --with-mpfr=<DIR> or --with-mpfr-include=<DIR>.])
    fi

    if ! test -d "$MPFR_LIB_DIR"; then
	MPFR_LIB_DIR=${MPFR_PREFIX}/lib
	if ! test -d "$MPFR_LIB_DIR"; then
	    AC_MSG_ERROR([$MPFR_LIB_DIR not found.  Please attach --with-mpfr=<DIR> or --with-mpfr-lib=<DIR>.])
	fi
    fi

    # check mpfr.h
    echo "#include <mpfr.h>" > $tmp_file_c
    ${CC} -E -I$MPFR_INCLUDE_DIR -I$GMP_INCLUDE_DIR $tmp_file_c 2> /dev/null > /dev/null
    if test $? -ne 0; then
	rm -f $tmp_file_c
	AC_MSG_ERROR([mpfr.h not found. Please attach --with-mpfr=<DIR> or --with-mpfr-include=<DIR>.])
    fi

    # check -lmpfr
    echo "int main(){return 0;}" > $tmp_file_c
    ${CC} -L$MPFR_LIB_DIR -lmpfr $tmp_file_c -o $tmp_file
    if test $? -ne 0; then
	rm -f $tmp_file tmp_file_c
	AC_MSG_ERROR([-lmpfr not found. Please attach --with-mpfr=<DIR> or --with-mpfr-lib=<DIR>.])
    fi
    rm -f $tmp_file tmp_file_c

    AC_SUBST(MPFR_INCLUDE_DIR)
    AC_SUBST(MPFR_LIB_DIR)
fi

#--------------------------------------------------------------------
# check -lstdc++
if test "$target" != "powerpc-hitachi-aix" -a "$target" != "sxace-nec-superux" -a "$target" != "sx9-nec-superux"; then
    tmp_file_c=/tmp/_xmp.$$.c
    tmp_file_x=/tmp/_xmp.$$.x
    echo "int main(){return 0;}" > $tmp_file_c
    chk=`$MPI_CC -lstdc++ $tmp_file_c -o $tmp_file_x 2> /dev/null`
    if test $? -ne 0; then
	rm -f $tmp_file_c $tmp_file_x
	AC_MSG_ERROR([-lstdc++ is not found.])
    else
	rm -f $tmp_file_c $tmp_file_x
    fi
fi

#--------------------------------------------------------------------
# MPI3 for MPI FLAGS
tmpmpi3=/tmp/tmpmpi3.$$.c
cat <<EOF > $tmpmpi3
#include <mpi.h>
MPI_VERSION
MPI_SUBVERSION
EOF

MPI_VERSION=`${MPI_CPP} ${MPI_CPPFLAGS} $tmpmpi3 | tail -2 | head -1`
MPI_SUBVERSION=`${MPI_CPP} ${MPI_CPPFLAGS} $tmpmpi3 | tail -1`
if test $MPI_VERSION -ge 3; then
    doMPI3_ASYNC=yes
else
    doMPI3_ASYNC=no
fi
rm -f $tmpmpi3

if test "x${target}" = "xKcomputer-linux-gnu"; then
    doMPI3_ASYNC=yes
fi

if test "x${doMPI3_ASYNC}" = "xyes"; then
    OMNI_X2X_FLAGS="${OMNI_X2X_FLAGS} -fasync"
fi

if test x${use_tca} = xyes; then
    if test x${doMPI3_ASYNC} = xno -a x${use_gasnet} = xno; then
	echo "Error!! TCA must use MPI version 3 or GASNet"
	exit 1
    fi
fi

use_mpi3_onesided=no
if test "x${doMPI3_ASYNC}" = "xyes" -a "x${use_gasnet}" = "xno" -a "x${target}" != "xKcomputer-linux-gnu"; then
    use_mpi3_onesided=yes
fi

MPI3_ASYNC=$FALSE
MPI3_ONESIDED=$FALSE
if test "x${doMPI3_ASYNC}" = "xyes"; then
    MPI3_ASYNC=$TRUE
fi
if test "x${use_mpi3_onesided}" = "xyes"; then
    MPI3_ONESIDED=$TRUE
fi

if test x${use_gasnet} = xyes; then
    ONESIDED_CPPFLAGS="-D_XMP_GASNET"
elif test x${use_mpi3_onesided} = xyes; then
    ONESIDED_CPPFLAGS="-D_XMP_MPI3_ONESIDED"
elif test x${target} = xKcomputer-linux-gnu -o x${target} = xFX10-linux-gnu -o x${target} = xFX100-linux-gnu; then
    ONESIDED_CPPFLAGS="-D_XMP_FJRDMA"
fi

AC_SUBST(MPI3_ASYNC)
AC_SUBST(MPI3_ONESIDED)
AC_SUBST(MPI_VERSION)
AC_SUBST(MPI_SUBVERSION)
AC_SUBST(ONESIDED_CPPFLAGS)

#--------------------------------------------------------------------
# check Perl versoin is 5
PERL5=""
AC_PATH_PROGS(PERL5, perl)

if test "$PERL5" = ""; then
    AC_MSG_ERROR([perl is not found.])
else
    isPerlVersion5=no
    AC_MSG_CHECKING(Perl version is 5)
    pTmp=/tmp/.btoolPerlChk.$$
    ${PERL5} -e 'require 5;' > ${pTmp} 2>&1
    if test "$?" = "0"; then
	AC_MSG_RESULT([yes])
	isPerlVersion5=yes
    else
	AC_MSG_RESULT([no])
	isPerlVersion5=no
    fi
    rm -f ${pTmp}
    unset chk pTmp
fi
AC_SUBST(PERL5)

#--------------------------------------------------------------------
# check java

AC_CHECK_PROG([JAVA], [java], [java])
AC_CHECK_PROG([JAVAC], [javac], [javac])
AC_CHECK_PROG([JAR], [jar], [jar])

which ${JAVA} 1>/dev/null 2>/dev/null
if test $? -ne 0; then
    AC_MSG_ERROR([JAVA is not found.])
fi

which ${JAVAC} 1>/dev/null 2>/dev/null
if test $? -ne 0; then
    AC_MSG_ERROR([JAVAC is not found.])
fi

which ${JAR} 1>/dev/null 2>/dev/null
if test $? -ne 0; then
    AC_MSG_ERROR([JAR is not found.])
fi

AC_SUBST(JAVA)
AC_SUBST(JAVAC)
AC_SUBST(JAR)

JAVA_OPT="-Xmx200m -Xms200m" # Fix: #338
JAVAC_OPT="-encoding utf8 -Xlint:deprecation,unchecked "
JAR_OPT=
# Set a small Heap Memory because Java installed on frontend machines of the K computer
if test "$target" = "Kcomputer-linux-gnu"; then
  #JAVA_OPT="-Xmx1600m -Xms800m"
  JAVAC_OPT+="-J-Xmx200m -J-Xms200m"
  JAR_OPT="-J-Xmx200m -J-Xms200m"
fi
AC_SUBST(JAVA_OPT)
AC_SUBST(JAVAC_OPT)
AC_SUBST(JAR_OPT)

#--------------------------------------------------------------------
#    The code below deals with several issues related to gettimeofday:
#    1. Some systems don't provide a gettimeofday function at all
#       (set NO_GETTOD if this is the case).
#    2. SGI systems don't use the BSD form of the gettimeofday function,
#       but they have a BSDgettimeofday function that can be used instead.
#    3. See if gettimeofday is declared in the <sys/time.h> header file.
#       if not, set the GETTOD_NOT_DECLARED flag so that tclPort.h can
#       declare it.
#--------------------------------------------------------------------
AC_CHECK_FUNCS(gettimeofday, , [AC_DEFINE(NO_GETTOD)])
AH_TEMPLATE(NO_GETTOD, [no gettimeofday])
AC_EGREP_HEADER(gettimeofday, sys/time.h, , AC_DEFINE(GETTOD_NOT_DECLARED))
AH_TEMPLATE(GETTOD_NOT_DECLARED, [not declared gettimeofday in sys/time.h])

#--------------------------------------------------------------------
# check type size/align

AC_CHECK_SIZEOF(unsigned char)
AC_CHECK_SIZEOF(unsigned short)
AC_CHECK_SIZEOF(unsigned int)
AC_CHECK_SIZEOF(unsigned long)
AC_CHECK_SIZEOF(unsigned long long)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(long double)
AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(_Bool)

SIZEOF_DOUBLE=$ac_cv_sizeof_double
AC_SUBST(SIZEOF_DOUBLE)
SIZEOF_FLOAT=$ac_cv_sizeof_float
AC_SUBST(SIZEOF_FLOAT)
SIZEOF_LONG_DOUBLE=$ac_cv_sizeof_long_double
AC_SUBST(SIZEOF_LONG_DOUBLE)
SIZEOF_UNSIGNED_CHAR=$ac_cv_sizeof_unsigned_char
AC_SUBST(SIZEOF_UNSIGNED_CHAR)
SIZEOF_UNSIGNED_INT=$ac_cv_sizeof_unsigned_int
AC_SUBST(SIZEOF_UNSIGNED_INT)
SIZEOF_UNSIGNED_LONG=$ac_cv_sizeof_unsigned_long
AC_SUBST(SIZEOF_UNSIGNED_LONG)
SIZEOF_UNSIGNED_LONG_LONG=$ac_cv_sizeof_unsigned_long_long
AC_SUBST(SIZEOF_UNSIGNED_LONG_LONG)
SIZEOF_UNSIGNED_SHORT=$ac_cv_sizeof_unsigned_short
AC_SUBST(SIZEOF_UNSIGNED_SHORT)
SIZEOF_VOID_P=$ac_cv_sizeof_void_p
AC_SUBST(SIZEOF_VOID_P)
SIZEOF__BOOL=$ac_cv_sizeof__Bool
AC_SUBST(SIZEOF__BOOL)

AC_CHECK_ALIGNOF(unsigned char)
AC_CHECK_ALIGNOF(unsigned short)
AC_CHECK_ALIGNOF(unsigned int)
AC_CHECK_ALIGNOF(unsigned long)
AC_CHECK_ALIGNOF(unsigned long long)
AC_CHECK_ALIGNOF(float)
AC_CHECK_ALIGNOF(double)
AC_CHECK_ALIGNOF(long double)
AC_CHECK_ALIGNOF(void *)
AC_CHECK_ALIGNOF(_Bool)

#--------------------------------------------------------------------
# 32/64 bit int type

rm -rf ./szchk ./szchk.*
AC_MSG_RESULT([Creating size check program])
${CC} ${CPPFLAGS} ${CFLAGS} ${hasLLFlags} ./buildutils/szchk.c -o ./szchk
if test ! -x ./szchk; then
        AC_MSG_ERROR([can't create size check program.])
fi

F2C_INT64_FLAGS=""
for i in 16 32 64
do
    AC_MSG_CHECKING([$i bit integer])
    typName=`./szchk $i`
    if test "x${typName}" = "xunknown"; then
    case $i in
    16)
        TYPE_INT16="short"
        AC_SUBST(TYPE_INT16)
        asump=${TYPE_INT16};;
    32)
        TYPE_INT32="int"
        AC_SUBST(TYPE_INT32)
        asump=${TYPE_INT32};;
    64)
        TYPE_INT64="long long int"
        AC_SUBST(TYPE_INT64)
        asump=${TYPE_INT64};;
    esac
    AC_MSG_RESULT([not supported. use $asump])
    else
    AC_MSG_RESULT([$typName])
    case $i in
    16)
        AC_DEFINE(HAS_INT16)
        AH_TEMPLATE(HAS_INT16, [has int16])
        TYPE_INT16=${typName}
        AC_SUBST(TYPE_INT16);;
    32)
        AC_DEFINE(HAS_INT32)
        AH_TEMPLATE(HAS_INT32, [has int32])
        TYPE_INT32=${typName}
        AC_SUBST(TYPE_INT32);;
    64)
        AC_DEFINE(HAS_INT64)
        AH_TEMPLATE(HAS_INT64, [has int64])
        F2C_INT64_FLAGS="-DAllow_TYQUAD"
        TYPE_INT64=${typName}
        AC_SUBST(TYPE_INT64);;
    esac
    fi
done
AC_SUBST(F2C_INT64_FLAGS)
rm -rf ./szchk ./szchk.*

#--------------------------------------------------------------------
# check size of integer enough to hold size of void *

AC_MSG_CHECKING([integer type enough to hold void pointer])
${CC} -I. ${CPPFLAGS} ${CFLAGS} ${hasLLFlags} ./buildutils/chkvoidp.c -o chkvoidp
voidPint="unknown"
if test -x ./chkvoidp; then
    voidPint=`./chkvoidp`
else
    AC_MSG_ERROR([can't create check program.])
fi
if test "x${voidPint}" = "xunknown"; then
    AC_MSG_ERROR([can't determine????])
else
    AC_MSG_RESULT([$voidPint])
fi
INT_ENUFF_FOR_VOIDP=$voidPint
AC_SUBST(INT_ENUFF_FOR_VOIDP)
rm -f ./chkvoidp.* ./chkvoidp

#--------------------------------------------------------------------
# check 64 bit virtual address

AC_MSG_CHECKING([64 bit virtual address])
${CC} -I. ${CPPFLAGS} ${CFLAGS} ./buildutils/addr64.c -o ./addr64
addrIs64="unknown"
if test -x ./addr64; then
    addrIs64=`./addr64`
else
    AC_MSG_ERROR([can't create check program.])
fi
if test "x$addrIs64" = "xunknown"; then
    AC_MSG_ERROR([can't determine????])
else
    if test "x$addrIs64" = "x8"; then
        AC_MSG_RESULT([yes])
        AC_DEFINE(ADDR_IS_64)
        AH_TEMPLATE(ADDR_IS_64, [])
    else
        AC_MSG_RESULT([no])
    fi
fi
rm -f ./addr64.* ./addr64
							
#--------------------------------------------------------------------
# has printf "%qd"

rm -f ./hasqd.* ./hasqd
AC_MSG_CHECKING([has quad-precision print format])
${CC} -I. ${CPPFLAGS} ${CFLAGS} ./buildutils/hasqd.c -o ./hasqd > /dev/null 2>&1
hasQD=no
if test -x ./hasqd; then
    ret=`./hasqd`
    if test "x$ret" = "xqd" -o "x$ret" = "x%qd"; then
        hasQD=no
    else
        hasQD=yes
    fi
fi
AC_MSG_RESULT([${hasQD}])
if test "x${hasQD}" = "xyes"; then
    AC_DEFINE(HAVE_QUAD_PRINT)
    AH_TEMPLATE(HAVE_QUAD_PRINT, [has printf "%qd"])
fi
rm -f ./hasqd.* ./hasqd
					
#--------------------------------------------------------------------
# quad real support

gmpIncOpt=""
gmpDirOpt=""
qRealPrecBits=128

AC_ARG_ENABLE(mreal,
    [  --enable-mreal          enable multiple precision real (and real*16) support of Fortran 77 (false default)],
        [doQReal=yes], [doQReal=no])

if test "x${doQReal}" = "xyes"; then
    if test -f ${GMP_INCLUDE_DIR}/gmp.h; then
        true
    else
        AC_MSG_ERROR([can't find ${GMP_INCLUDE_DIR}/gmp.h. Please attach --with-gmp=<DIR> or --with-gmp-lib=<DIR>.])
    fi
    
    if ! test -d "$GMP_LIB_DIR"; then
      AC_MSG_ERROR([$GMP_LIB_DIR not found. Please attach --with-gmp=<DIR> or --with-gmp-lib=<DIR>.])
    fi
    
    gmpLibs=`ls ${GMP_LIB_DIR}/libgmp.* 2> /dev/null`
    if test "x${gmpLibs}" = "x"; then
        AC_MSG_ERROR([can't find ${GMP_LIB_DIR}/libgmp.*. Please attach --with-gmp=<DIR> or --with-gmp-lib=<DIR>.])
    fi
    gmpIncOpt="-I${GMP_INCLUDE_DIR}"
    gmpLibOpt="-L${GMP_LIB_DIR} -lgmp"
fi

AC_ARG_WITH(precision,
    [  --with-precision=NUM        the default precision of real*16 in bits (128)],
        [qRealPrecBits=$withval], [qRealPrecBits=128])

# libgmp check
omniLimbT="int"
omniExpT="int"
omniQRealPrecInLimb="1"
omniQRealFillGap=""
if test "x${doQReal}" = "xyes"; then
    omniQPrec=$qRealPrecBits
    AC_DEFINE(ENABLE_QREAL)
    AH_TEMPLATE(ENABLE_QREAL, [quad real])
    AC_DEFINE_UNQUOTED(OMNI_QREAL_PREC, $omniQPrec)
    AH_TEMPLATE(OMNI_QREAL_PREC, [quad real])

    qcCC () {
        rm -f $2 ${2}.*
        ${CC} -I. ${CPPFLAGS} ${CFLAGS} -DENABLE_QREAL ${hasLLFlags} ${gmpIncOpt} $3 $1 -o $2 ${gmpLibOpt}
        if test -x $2; then
            ret=`$2 $4`
            if test "x${ret}" = "x"; then
                AC_MSG_ERROR([can't determine??.])
            else
                rm -f $2 ${2}.*
                echo ${ret}
            fi
        else
            AC_MSG_ERROR([can't create check program.])
        fi
    }

    # check size of mp_exp_t
    AC_MSG_CHECKING([size of GNU-MP mp_exp_t])
    eSz=`qcCC buildutils/csMPexp.c ./csMPexp`
    AC_MSG_RESULT([${eSz}])
    omniExpT=""
    case ${eSz} in
    2)
        omniExpT=${TYPE_INT16};;
    4)
        omniExpT=${TYPE_INT32};;
    8)
        omniExpT=${TYPE_INT64};;
    *)
        AC_MSG_ERROR([can't determine basic type of mp_exp_t ??.])
    esac
    AC_DEFINE_UNQUOTED(OMNI_SIZEOF_QEXP_T, $eSz)
    AH_TEMPLATE(OMNI_SIZEOF_QEXP_T, [size of mp_exp_t])

    # check size of mp_limb_t
    AC_MSG_CHECKING([size of GNU-MP mp_limb_t])
    lSz=`qcCC buildutils/csMPlimb.c ./csMPlimb`
    AC_MSG_RESULT([${lSz}])
    omniLimbT=""
    case ${lSz} in
    2)
        omniLimbT=${TYPE_INT16};;
    4)
        omniLimbT=${TYPE_INT32};;
    8)
        omniLimbT=${TYPE_INT64};;
    *)
        AC_MSG_ERROR([can't determine basic type of mp_limb_t ??.]);;
    esac
    AC_DEFINE_UNQUOTED(OMNI_SIZEOF_QLIM_T, $lSz)
    AH_TEMPLATE(OMNI_SIZEOF_QLIM_T, [size of mp_limb_t])

    # check how many mp_limb_t the GNU-MP needed for N bit precision.
    AC_MSG_CHECKING([how many mp_limb_t needed for $omniQPrec bit precision])
    omniQRealPrecInLimb=`qcCC buildutils/cMPlb.c ./cMPlb '' $omniQPrec`
    AC_MSG_RESULT([$omniQRealPrecInLimb])
    AC_DEFINE_UNQUOTED(OMNI_QLIM_LEN, $omniQRealPrecInLimb)
    AH_TEMPLATE(OMNI_QLIM_LEN, [how many mp_limb_t the GNU-MP needed for N bit precision])

    # check _omQReal_t needs a gap between _mp_exp and _mp_d[omniQRealPrecInLimb].
    AC_MSG_CHECKING([_omQReal_t needs a gap between _mp_exp and _mp_d])
    gapInByte=`expr $lSz - $eSz`
    subStr=""
    if test ${gapInByte} -gt 0; then
        case ${gapInByte} in
        2)
            # lim == int, exp == short
            subStr="${TYPE_INT16} _gap_;";;
	4)
	    # lim == long long, exp == int
	    subStr="${TYPE_INT32} _gap_;";;
	*)
	    # lim == long long, exp == short
	    changequote(<<, >>)
	    subStr="char _gap_[${gapInByte}];"
	    changequote([, ])
	    ;;
        esac
    fi
    if test "x${subStr}" != "x"; then
        # TODO
        AC_MSG_RESULT([yes, put a "${subStr}" member in _omQReal_t.])
        omniQRealFillGap=${subStr}
        AC_DEFINE(OMNI_QREAL_NEED_GAP_MEMBER)
        AH_TEMPLATE(OMNI_QREAL_NEED_GAP_MEMBER, [])
        AC_DEFINE_UNQUOTED(OMNI_QREAL_GAP_SIZE, ${gapInByte})
        AH_TEMPLATE(OMNI_QREAL_GAP_SIZE, [GNU-MP gapInByte])
    else
        omniQRealFillGap="/* if ((sizeof(mp_exp_t) < sizeof(mp_limb_t)), here must be a gap filling member. */"
        AC_MSG_RESULT([no])
    fi

    # check libgmp has an mpf_floor(), appeared in gmp3 later.
    oLIBS=${LIBS}
    LIBS="${LIBS} ${gmpLibOpt}"
    oCFLAGS=${CFLAGS}
    CFLAGS="${CFLAGS} ${CPPFLAGS} -DENABLE_QREAL ${gmpIncOpt}"
    AC_MSG_CHECKING([mpf_floor() in $LIBS])
    hasFloor=no
    AC_TRY_LINK(
    [
        #include "gmp.h"
    ],
    [
        mpf_t a;
        mpf_t b;
        (void)mpf_floor(a, b);
    ],
    [AC_MSG_RESULT(yes); hasFloor=yes],
    [AC_MSG_RESULT(no)]
    )
    LIBS=${oLIBS}
    CFLAGS=${oCFLAGS}
    if test "x${hasFloor}" = "xno"; then
        AC_MSG_ERROR([You have to use gmp3 or later.])
    fi
fi

AC_SUBST(doQReal)
AC_SUBST(gmpIncOpt)
AC_SUBST(gmpLibOpt)
AC_SUBST(omniQPrec)
AC_SUBST(omniExpT)
AC_SUBST(omniLimbT)
AC_SUBST(omniQRealPrecInLimb)
AC_SUBST(omniQRealFillGap)

#--------------------------------------------------------------------
# Export Omni Config Variable

if test "${prefix}" = "NONE" -o "${prefix}" = ""; then
    OMNI_HOME=/usr/local
else
    OMNI_HOME=${prefix}
fi
AC_SUBST(OMNI_HOME)
AH_TEMPLATE(OMNI_HOME, [omni compiler install directory])
AC_DEFINE_UNQUOTED(OMNI_HOME, "${OMNI_HOME}")

# If "--sysconfdir=" is set,
if test "${sysconfdir}" != '${prefix}/etc'; then
    OM_DRIVER_CONF_DIR="${sysconfdir}"
else
    OM_DRIVER_CONF_DIR="${OMNI_HOME}/etc"
fi

AC_SUBST(OM_DRIVER_CONF_DIR)
AH_TEMPLATE(OM_DRIVER_CONF_DIR, [omni compiler driver configuration file directory])
AC_DEFINE_UNQUOTED(OM_DRIVER_CONF_DIR, "${OM_DRIVER_CONF_DIR}")

OM_EXEC_C_PP="${MPI_CPP}"
AC_SUBST(OM_EXEC_C_PP)

OM_EXEC_C_COMPILER="${MPI_CC}"
AC_SUBST(OM_EXEC_C_COMPILER)

OM_EXEC_C_LINKER="${MPI_CC}"
AC_SUBST(OM_EXEC_C_LINKER)

OM_EXEC_CXX_LINKER="${CXX}"
AC_SUBST(OM_EXEC_CXX_LINKER)

OM_EXEC_F_PP="${OMNI_F_PP}"
AC_SUBST(OM_EXEC_F_PP)

OM_EXEC_F_COMPILER="${MPI_FC}"
AC_SUBST(OM_EXEC_F_COMPILER)

OM_EXEC_F_LINKER="${MPI_FC}"
AC_SUBST(OM_EXEC_F_LINKER)

INCLUDECOM=include
AC_SUBST(INCLUDECOM)

#--------------------------------------------------------------------
# headers/macros
AC_CHECK_HEADER(sys/param.h,    [AC_DEFINE([HAVE_SYS_PARAM_H],    [1], [ ])])
AC_CHECK_HEADER(ctype.h,        [AC_DEFINE([HAVE_CTYPE_H],        [1], [ ])])
AC_CHECK_HEADER(stdio.h,        [AC_DEFINE([HAVE_STDIO_H],        [1], [ ])])
AC_CHECK_HEADER(stdarg.h,       [AC_DEFINE([HAVE_STDARG_H],       [1], [ ])])
AC_CHECK_HEADER(dirent.h,       [AC_DEFINE([HAVE_DIRENT_H],       [1], [ ])])
AC_CHECK_HEADER(time.h,         [AC_DEFINE([HAVE_TIME_H],         [1], [ ])])
AC_CHECK_HEADER(sys/termios.h,  [AC_DEFINE([HAVE_SYS_TERMIOS_H],  [1], [ ])])
AC_CHECK_HEADER(signal.h,       [AC_DEFINE([HAVE_SIGNAL_H],       [1], [ ])])
AC_CHECK_HEADER(netdb.h,        [AC_DEFINE([HAVE_NETDB_H],        [1], [ ])])
AC_CHECK_HEADER(netinet/tcp.h,  [AC_DEFINE([HAVE_NETINET_TCP_H],  [1], [ ])])
AC_CHECK_HEADER(sys/socket.h,   [AC_DEFINE([HAVE_SYS_SOCKET_H],   [1], [ ])])
AC_CHECK_HEADER(arpa/inet.h,    [AC_DEFINE([HAVE_ARPA_INET_H],    [1], [ ])])
AC_CHECK_HEADER(sys/ioctl.h,    [AC_DEFINE([HAVE_SYS_IOCTL_H],    [1], [ ])])
AC_CHECK_HEADER(pthread.h,      [AC_DEFINE([HAVE_PTHREAD_H],      [1], [ ])])
AC_CHECK_HEADER(stdbool.h,      [AC_DEFINE([HAVE_STDBOOL_H],      [1], [ ])])
AC_CHECK_HEADER(sys/resource.h, [AC_DEFINE([HAVE_SYS_RESOURCE_H], [1], [ ])])
AC_CHECK_HEADER(regex.h,        [AC_DEFINE([HAVE_REGEX_H],        [1], [ ])])
AC_CHECK_FUNC(strtold,          [AC_DEFINE([HAVE_STRTOLD],        [1], [ ])])

# Assume 32 bit for cross compilation.
AC_CHECK_SIZEOF(short int, 2)
AC_CHECK_SIZEOF(int,       4)
AC_CHECK_SIZEOF(long int,  4)
AC_CHECK_SIZEOF(long long, 8)
AC_CHECK_SIZEOF(int64_t,   8)
AC_CHECK_SIZEOF(size_t,    4)
AC_CHECK_SIZEOF(void *,    4)

oCPPFLAGS=${CPPFLAGS}
oCFLAGS=${CFLAGS}
CPPFLAGS=''
CFLAGS="${CFLAGS} -Wall -Werror"
AC_MSG_CHECKING([print format for size_t])
AC_RUN_IFELSE(
    [AC_LANG_PROGRAM(
        [[#include <stdio.h>]
         [#include <stddef.h>]
         [#include <string.h>]],
         [[char buf[24];]
          [snprintf(buf, sizeof(buf), "%zu", (size_t)1);]
          [return (strcmp("1", buf) == 0 && strlen(buf) == 1) ? ]
          [0 : 1;]])],
    [AC_DEFINE([HAVE_PRINT_FORMAT_FOR_SIZE_T], [], [ ])
     AC_MSG_RESULT([available.])],
    [AC_MSG_RESULT([not available.])],
    [AC_MSG_RESULT([not checkable since cross-compilation.])])
CFLAGS=${oCFLAGS}
CPPFLAGS=${oCPPFLAGS}

# where the omni is.
tmpOmniDir=''
omniDir="${OMNI_HOME}"
omniBinDir=''
omniLibDir=''
omniEtcDir="${OM_DRIVER_CONF_DIR}/"
omniIncDir=''

if test -d "${tmpOmniDir}"; then
    if test -x "${tmpOmniDir}/bin/F_Front"; then
        omniDir="${tmpOmniDir}"
	AC_MSG_RESULT([yes.])
    else
        omniDir=''
        AC_MSG_RESULT([no. Assume every user sets path correctly.])
    fi
fi
if test ! -z "${omniDir}"; then
    # Don't delete the last slash.
    omniBinDir="${omniDir}"/bin/
    omniLibDir="${omniDir}"/lib/
    omniIncDir="${omniDir}"/include
fi
AC_SUBST(omniDir)
AC_SUBST(omniBinDir)
AC_SUBST(omniLibDir)
AC_SUBST(omniEtcDir)
AC_SUBST(omniIncDir)

# cpp
cppCmd=${CPP}
if test -z "${CPP}"; then
    AC_MSG_ERROR([Can't find any usable C preprosessor.])
fi
AC_SUBST(cppCmd)

HOSTARCH=`./buildutils/config.guess | grep -v Linking`
CPU=`echo $HOSTARCH | awk -F- '{ print $1 }' | sed 's/\./_/g'`
OS=`echo $HOSTARCH | awk -F- '{ print $3 }' | sed 's/\./_/g'`

case $CPU in
i*86)
    CPU=i386;;
esac

OS_CPPFLAGS='-D_REENTRANT'
OS_LDFLAGS=''
OS_LIBS=''
OS_CFLAGS=''
if test -z "${MAKE}"; then
    MAKE=make
fi

API_FLAVOR=NATA_API_POSIX
TARGET_ARCH=POSIX
case $OS in
sunos*)
    OS=sunos;;
solaris*)
    OS=solaris;;
aix*)
    MAKE=gmake;;
freebsd*)
    OS=freebsd;;
linux*)
    OS_CPPFLAGS="${OS_CPPFLAGS} -D_GNU_SOURCE"
    OS_LIBS="-lrt -lpthread"
    OS=linux;;
netbsd*)
    MAKE=gmake
    OS_CPPFLAGS="${OS_CPPFLAGS} -I/usr/pkg/include"
    OS_LDFLAGS="-L/usr/pkg/lib"
    OS_LIBS="-lpthread"
    OS=netbsd;;
cygwin*)
    OS=cygwin;;
mingw32ce)
    OS=windowsce
    TARGET_ARCH=WINDOWS
    API_FLAVOR=NATA_API_WIN32API;;
mingw32*)
    case $CPU in
    x86_64*)
        OS=windows64;;
    i*86)
        OS=windows32;;
    *)
        OS=windows;;
    esac
    OS_LIBS="-lpthread -loleaut32 -lws2_32 -lwinmm"
    TARGET_ARCH=WINDOWS
    API_FLAVOR=NATA_API_WIN32API;;
esac

OS_CXXFLAGS=${OS_CFLAGS}
AC_SUBST(MAKE)
AC_SUBST(OS_CPPFLAGS)
AC_SUBST(OS_CFLAGS)
AC_SUBST(OS_CXXFLAGS)
AC_SUBST(OS_LDFLAGS)
AC_SUBST(OS_LIBS)

changequote(<<, >>)
CPUDEF=NATA_CPU_`echo $CPU | tr '[a-z]' '[A-Z]'`
OSDEF=NATA_OS_`echo $OS | tr '[a-z]' '[A-Z]'`
changequote([, ])
AC_SUBST(CPUDEF)
AC_SUBST(OSDEF)
AC_SUBST(API_FLAVOR)
AC_SUBST(TARGET_ARCH)

MKRULESDIR=${TOPDIR}/Driver/atool/mk
AC_SUBST(MKRULESDIR)

AC_SUBST(CPPFLAGS)
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(LDFLAGS)

AC_CONFIG_FILES(
    Driver/atool/mk/vars.mk
    Driver/atool/Makefile
    Driver/atool/src/lib/Makefile
    Driver/atool/src/include/nata/Makefile
    Driver/atool/src/include/nata/nata_platform.h
    Driver/atool/src/cmd/Makefile
    Driver/atool/src/cmd/paths.h
)

AC_CONFIG_COMMANDS([modify-config],
	[(cd Driver/atool && ${BASH} ./mk/finalizeconfig ${OS_CPPFLAGS})],
	[OS_CPPFLAGS="${OS_CPPFLAGS}"])

AC_CONFIG_COMMANDS([includes],
        [${BASH} ./Driver/atool/mk/initheaders])

AC_CONFIG_COMMANDS([depend],
        [(${BASH} ./Driver/atool/mk/initdepend && cd ./Driver/atool && ${MAKE} depend)],
        [MAKE=${MAKE}])

#AC_CONFIG_COMMANDS([config-clean],
#       [rm -rf ./config.log ./config.status.* autom4te.cache])

unset program_transform_name

#--------------------------------------------------------------------
# Set version file
VERSIONTXT="./Driver/etc/version"

# If possible, set more information
if test -d .git || test -f .git; then
    which git 1>/dev/null 2>/dev/null
    if test $? -eq 0; then
        VERSION_INFO=`git log --date=short --pretty=format:"Last Commit Day:%ad, Hash Value:%h" -1`
        echo -n Version:AC_PACKAGE_VERSION, ${VERSION_INFO} > ${VERSIONTXT}
    else
        echo -n Version:AC_PACKAGE_VERSION > ${VERSIONTXT}
    fi
fi

# check use one-sided
isOnesided=no
if test "$target" = "Kcomputer-linux-gnu" -o "$target" = "FX10-linux-gnu" -o "$target" = "FX100-linux-gnu"; then
    isOnesided=yes
    ONESIDED_LIB="Fujitsu RDMA"
    isCoarray=yes
    isPostWait=yes
    isLockUnlock=no
elif test x$use_gasnet = xyes; then
    isOnesided=yes
    ONESIDED_LIB=GASNet
    isCoarray=yes
    isPostWait=yes
    isLockUnlock=yes
elif test x$use_mpi3_onesided = xyes; then
    isOnesided=yes
    ONESIDED_LIB=MPI3
    isCoarray=yes
    isPostWait=yes
    isLockUnlock=no
fi

if test x${use_tca} = xyes; then
  ONESIDED_LIB="$ONESIDED_LIB + TCA"
fi
  
AC_SUBST(ONESIDED_LIB)
			      
#--------------------------------------------------------------------
AC_CONFIG_FILES(XcodeML-Common/Makefile)
AC_CONFIG_FILES(C-FrontEnd/src/Makefile)
AC_CONFIG_FILES(C-BackEnd/Makefile)
AC_CONFIG_FILES(F-FrontEnd/src/Makefile)
AC_CONFIG_FILES(F-FrontEnd/src/F-input-xmod.h)
AC_CONFIG_FILES(F-FrontEnd/src/fincludes/iso_c_binding.f90)
AC_CONFIG_FILES(F-FrontEnd/gnu_module/Makefile)
AC_CONFIG_FILES(F-BackEnd/Makefile)
AC_CONFIG_FILES(F-BackEnd/bin/F_Back)
AC_CONFIG_FILES(F-BackEnd/bin/F_Decomp)
AC_CONFIG_FILES(F-BackEnd/bin/F_Trans)
AC_CONFIG_FILES(XcodeML-Exc-Tools/Makefile)
AC_CONFIG_FILES(XcodeML-Exc-Tools/src/exc/util/MachineDepConst.java)
AC_CONFIG_FILES(Driver/src/Makefile)
AC_CONFIG_FILES(Driver/etc/setup.conf)
AC_CONFIG_FILES(Driver/etc/ompcc.conf)
AC_CONFIG_FILES(Driver/etc/ompf90.conf)
AC_CONFIG_FILES(Driver/etc/xmpcc.conf)
AC_CONFIG_FILES(Driver/etc/xmpf90.conf)
AC_CONFIG_FILES(Driver/bin/omtranslate)
AC_CONFIG_FILES(Driver/bin/ompcc)
AC_CONFIG_FILES(Driver/bin/ompf90)
AC_CONFIG_FILES(Driver/bin/xmpcc)
AC_CONFIG_FILES(Driver/bin/xmpf90)
AC_CONFIG_FILES(libxmp/include/Makefile)
AC_CONFIG_FILES(libxmp/src/Makefile)
AC_CONFIG_FILES(libxmp/src_threads/Makefile)
AC_CONFIG_FILES(libxmpf/include/Makefile)
AC_CONFIG_FILES(libxmpf/src/Makefile)

#--------------------------------------------------------------------
genLibTargetTmpl () {
    dir=$1
    tmpl=${dir}/target.tmpl
    echo "$ac_t""creating ${tmpl}" 1>&6 > ${tmpl}
    ./buildutils/genLibTarget --locks="${available_locks}" --threads="${available_threads}" \
			      --def_lock=${lock_type} --def_thread=${thread_type} \
			      --ignore_combo="${ignore_pair}" --os=${OS} --cpu=${CPU} \
			      `(cd ${dir};grep --regexp="^SRCS" Makefile.in | sed s/"SRCS = "//g)` > ${tmpl}
}
#--------------------------------------------------------------------
genLibTargetTmpl libompc/src
AC_CONFIG_FILES(libompc/src/Makefile)
AC_CONFIG_FILES(libompf/src/Makefile)
AC_CONFIG_FILES(libtlog/src_threads/Makefile)
AC_CONFIG_FILES(libtlog/src_mpi/Makefile)
AC_CONFIG_FILES(libtlog/src_mpi/bin/tlogview)
AC_CONFIG_FILES(libacc/src/Makefile)
AC_CONFIG_FILES(libacc/include/Makefile)

# --------------------------------------------------------------------
AC_CONFIG_FILES(Makefile)
AC_OUTPUT

# --------------------------------------------------------------------
# Output

cat << EOF
==================================================
  -- Configuration Summary --

  PREFIX : ${prefix}

  Local Compilers:
    C compiler (CC)                      : `which $CC`
    C compiler flags (CFLAGS)            : $CFLAGS
    Fortran compiler (FC)                : `which $FC`
    Fortran compiler flags (FCFLAGS)     : $FCFLAGS
    Java application launcher (JAVA)     : `which "$JAVA"`
    Java compiler (JAVAC)                : `which $JAVAC`
    Java Archive Tool (JAR)              : `which $JAR`

  Native Compilers:
    C preprocessor (MPI_CPP)                    : `which $MPI_CPP`
    C preprocessor flags (MPI_CPPFLAGS)         : $MPI_CPPFLAGS
    C compiler (MPI_CC)                         : `which $MPI_CC`
    C compiler flags (MPI_CFLAGS)               : $MPI_CFLAGS
    C compiler linker flags (MPI_CLIBS)         : $MPI_CLIBS
    Fortran preprocessor (MPI_FPP)              : `which $MPI_FPP`
    Fortran preprocessor flags (MPI_FPPFLAGS)   : $MPI_FPPFLAGS
    Fortran compiler (MPI_FC)                   : `which $MPI_FC`
    Fortran compiler flags (MPI_FCFLAGS)        : $MPI_FCFLAGS
    Fortran compiler linker flags (MPI_FCLIBS)  : $MPI_FCLIBS
    MPI Version                                 : ${MPI_VERSION}.${MPI_SUBVERSION}

  Note: If you want to change above compilers and their options,
        please rerun ./configure MPI_CC=...

  Options:
    BLAS Library                 : $output_libblas
    OpenACC                      : $doOpenAcc
    Onesided                     : $isOnesided
EOF

if test x${isOnesided} = xyes; then
  echo "      Communication Library      : $ONESIDED_LIB"
fi

if test x${use_gasnet} = xyes; then
  echo "        Installed in             : $GASNET_PREFIX"
  echo "        Conduit                  : $GASNET_CONDUIT"
fi

if test x${isOnesided} = xyes; then
  echo "      Coarray                    : $isCoarray"
  echo "      Post/Wait                  : $isPostWait"
  echo "      Lock/Unlock                : $isLockUnlock"
fi

if test x${domod2xmod} = xyes; then
  echo "    Translate .mod to .xmod      : $domod2xmod"
fi
echo "=================================================="
