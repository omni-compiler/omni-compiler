######################################
# NAS Parallel Benchmarks 2-serial   #
# MPI/F77/C                          #
# Revision 2.3        08/18/97       #
# NASA Ames Research Center          #
# npb@nas.nasa.gov                   #
# http://www.nas.nasa.gov/NAS/NPB/   #
######################################

Note:  the following README ordinarily accompanies the NAS Parallel 
Benchmark suite.  The version you are currently installing, however,
is the NAS Parallel Benchmark-serial suite, which is intended to be 
used as a starting point for parallelization efforts such as automated or 
computer assisted parallelization tools, or for SMP directive insertions.  
Installing, however, proceeds just as for the parallel version, except
thet there is no NPROCS value to be set.  For the most part, the 
codes contained herein have been obtained from the parallel version by 
removing all parallelism and any reference to such parallelism. such as 
variables like "nprocs", include files such as mpi.h, etc.

Note:  to compile these serial version codes within the context of 
this make suite it is only required that the config/make.def file
be supplied (config/make.def.template is a generic template for all
systems; config/NAS.samples/make.def.iris6.2 is an example which can
be used for the SGI Iris INDY workstation).  Timing is done with calls 
from common/timers.f to wtime, which is supplied as common/wtime.c,
and includes wtime.h to set binding conventions.



This README file explains how to build the NAS parallel benchmark suite. 
Please read the technical report (enclosed PostScript file in this
directory) as well. 

1. Edit the site- and machine-specific data in config/make.def
   Several sample versions are included in subdirectory NAS.samples
   of the config directory so you may be able to copy one. A clean 
   version is in config/make.def.template.
   Different values for the variable "RAND" are explained at the 
   end of this document. 

2. Each benchmark comes in 5 sizes (classes): A, B, C, W(orkstation)
   and S(ample). Since Fortran 77 doesn't have dynamic memory allocation,
   the class must be specified at compile time.

   To compile a given benchmark for specific class, type "

       make benchmark-name CLASS={A,B,C,S,W}

   For instance, to create a class A version of the SP benchmark, type:

         make sp CLASS=A

   The executable is placed in the subdirectory "bin" of the
   distribution (or in the directory BINDIR specified in make.def, if
   you've defined it). The name of the executable is 
   "benchmark-name.CLASS", e.g., "sp.B". 

   -----------------------------------
   NOTE: THE BUILD PROCEDURE FOR NPB 2 WILL NOT WORK CORRECTLY WITH 
         A PARALLEL MAKE UTILITY. 
   -----------------------------------
         To use a parallel make, configure a benchmark before building 
         it, e.g.:
               cd FT
               make config CLASS=A
               make CLASS=A


3. The procedure in item 2 allows you to build one benchmark
   at a time. To build a whole suite, you can type "make suite"
   Make will look in file "config/suite.def" for a list of 
   executables to build. The file contains one line per specification, 
   with comments preceded by "#". Each line contains the name
   of a benchmark, the class, and the number of processors, separated
   by spaces or tabs. For instance, the file could contain:
     
# This is a sample suite file to build several executables
sp      A
sp      A
sp      A
ft      B
ft      B
ft      B




================================

The "RAND" variable in make.def
--------------------------------

Most of the NPBs use a random number generator. In two of the NPBs (FT
and EP) the computation of random numbers is included in the timed
part of the calculation, and it is important that the random number
generator be efficient.  The default random number generator package
provided with NPB 2 is called "randi8" and should be used where
possible. It has the following requirements:

randi8:
  1. Uses integer*8 arithmetic. Compiler must support integer*8
  2. Uses the Fortran 90 IAND intrinsic. Compiler must support IAND.
  3. Assumes overflow bits are discarded by the hardware. In particular, 
     that the lowest 46 bits of a*b are always correct, even if the 
     result a*b is larger than 2^64. 

Since randi8 may not work on all machines, we supply the following
alternatives:

randi8_safe
  1. Uses integer*8 arithmetic
  2. Uses the Fortran 90 IBITS intrinsic. 
  3. Does not make any assumptions about overflow. Should always
     work correctly if compiler supports integer*8 and IBITS. 

randdp
  1. Uses double precision arithmetic (to simulate integer*8 operations). 
     Should work with any system with support for 64-bit floating
     point arithmetic.      

randdpvec
  1. Similar to randdp but written to be easier to vectorize. 


